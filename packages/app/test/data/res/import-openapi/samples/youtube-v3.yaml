openapi: 3.0.0
servers:
  - url: 'https://youtubeanalytics.googleapis.com/'
info:
  contact:
    name: Google
    url: 'https://google.com'
    x-twitter: youtube
  description: Retrieves your YouTube Analytics data.
  license:
    name: Creative Commons Attribution 3.0
    url: 'http://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://developers.google.com/terms/'
  title: YouTube Analytics
  version: v2
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: 'https://upload.wikimedia.org/wikipedia/commons/e/e1/YouTube_play_buttom_icon_%282013-2017%29.svg'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.7.31
      format: google
      url: 'https://youtubeanalytics.googleapis.com/$discovery/rest?version=v2'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: youtubeAnalytics
externalDocs:
  url: 'https://developers.google.com/youtube/analytics'
tags:
  - name: reports
  - name: groupItems
  - name: groups
paths:
  /v2/groupItems:
    delete:
      description: Removes an item from a group.
      operationId: youtubeAnalytics.groupItems.delete
      parameters:
        - description: |-
            The `id` parameter specifies the YouTube group item ID of the group item
            that is being deleted.
          in: query
          name: id
          schema:
            type: string
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmptyResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groupItems
    get:
      description: Returns a collection of group items that match the API request parameters.
      operationId: youtubeAnalytics.groupItems.list
      parameters:
        - description: |-
            The `groupId` parameter specifies the unique ID of the group for which you
            want to retrieve group items.
          in: query
          name: groupId
          schema:
            type: string
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListGroupItemsResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groupItems
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
    post:
      description: Creates a group item.
      operationId: youtubeAnalytics.groupItems.insert
      parameters:
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupItem'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupItem'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groupItems
  /v2/groups:
    delete:
      description: Deletes a group.
      operationId: youtubeAnalytics.groups.delete
      parameters:
        - description: |-
            The `id` parameter specifies the YouTube group ID of the group that is
            being deleted.
          in: query
          name: id
          schema:
            type: string
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmptyResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groups
    get:
      description: |-
        Returns a collection of groups that match the API request parameters. For
        example, you can retrieve all groups that the authenticated user owns,
        or you can retrieve one or more groups by their unique IDs.
      operationId: youtubeAnalytics.groups.list
      parameters:
        - description: |-
            The `id` parameter specifies a comma-separated list of the YouTube group
            ID(s) for the resource(s) that are being retrieved. Each group must be
            owned by the authenticated user. In a `group` resource, the `id` property
            specifies the group's YouTube group ID.

            Note that if you do not specify a value for the `id` parameter, then you
            must set the `mine` parameter to `true`.
          in: query
          name: id
          schema:
            type: string
        - description: |-
            This parameter can only be used in a properly authorized request. Set this
            parameter's value to true to retrieve all groups owned by the authenticated
            user.
          in: query
          name: mine
          schema:
            type: boolean
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
        - description: |-
            The `pageToken` parameter identifies a specific page in the result set that
            should be returned. In an API response, the `nextPageToken` property
            identifies the next page that can be retrieved.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListGroupsResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
    post:
      description: Creates a group.
      operationId: youtubeAnalytics.groups.insert
      parameters:
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Group'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groups
    put:
      description: 'Modifies a group. For example, you could change a group''s title.'
      operationId: youtubeAnalytics.groups.update
      parameters:
        - description: |-
            This parameter can only be used in a properly authorized request. **Note:**
            This parameter is intended exclusively for YouTube content partners that
            own and manage many different YouTube channels.

            The `onBehalfOfContentOwner` parameter indicates that the request's
            authorization credentials identify a YouTube user who is acting on behalf
            of the content owner specified in the parameter value. It allows content
            owners to authenticate once and get access to all their video and channel
            data, without having to provide authentication credentials for each
            individual channel. The account that the user authenticates with must be
            linked to the specified YouTube content owner.
          in: query
          name: onBehalfOfContentOwner
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Group'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - groups
  /v2/reports:
    get:
      description: Retrieve your YouTube Analytics reports.
      operationId: youtubeAnalytics.reports.query
      parameters:
        - description: |-
            The currency to which financial metrics should be converted. The default is
            US Dollar (USD). If the result contains no financial metrics, this flag
            will be ignored. Responds with an error if the specified currency is not
            recognized.",
            pattern: [A-Z]{3}
          in: query
          name: currency
          schema:
            type: string
        - description: |-
            A comma-separated list of YouTube Analytics dimensions, such as `views` or
            `ageGroup,gender`. See the [Available
            Reports](/youtube/analytics/v2/available_reports) document for a list of
            the reports that you can retrieve and the dimensions used for those
            reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims)
            document for definitions of those dimensions."
            pattern: [0-9a-zA-Z,]+
          in: query
          name: dimensions
          schema:
            type: string
        - description: |-
            The end date for fetching YouTube Analytics data. The value should be in
            `YYYY-MM-DD` format.
            required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2}
          in: query
          name: endDate
          schema:
            type: string
        - description: |-
            A list of filters that should be applied when retrieving YouTube Analytics
            data. The [Available Reports](/youtube/analytics/v2/available_reports)
            document identifies the dimensions that can be used to filter each report,
            and the [Dimensions](/youtube/analytics/v2/dimsmets/dims)  document defines
            those dimensions. If a request uses multiple filters, join them together
            with a semicolon (`;`), and the returned result table will satisfy both
            filters. For example, a filters parameter value of
            `video==dMH0bHeiRNg;country==IT` restricts the result set to include data
            for the given video in Italy.",
          in: query
          name: filters
          schema:
            type: string
        - description: |-
            Identifies the YouTube channel or content owner for which you are
            retrieving YouTube Analytics data.

            - To request data for a YouTube user, set the `ids` parameter value to
              `channel==CHANNEL_ID`, where `CHANNEL_ID` specifies the unique YouTube
              channel ID.
            - To request data for a YouTube CMS content owner, set the `ids` parameter
              value to `contentOwner==OWNER_NAME`, where `OWNER_NAME` is the CMS name
              of the content owner.
            required: true, pattern: [a-zA-Z]+==[a-zA-Z0-9_+-]+
          in: query
          name: ids
          schema:
            type: string
        - description: |-
            If set to true historical data (i.e. channel data from before the linking
            of the channel to the content owner) will be retrieved.",
          in: query
          name: includeHistoricalChannelData
          schema:
            type: boolean
        - description: |-
            The maximum number of rows to include in the response.",
            minValue: 1
          in: query
          name: maxResults
          schema:
            type: integer
        - description: |-
            A comma-separated list of YouTube Analytics metrics, such as `views` or
            `likes,dislikes`. See the
            [Available Reports](/youtube/analytics/v2/available_reports)  document for
            a list of the reports that you can retrieve and the metrics
            available in each report, and see the
            [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of
            those metrics.
            required: true, pattern: [0-9a-zA-Z,]+
          in: query
          name: metrics
          schema:
            type: string
        - description: |-
            A comma-separated list of dimensions or metrics that determine the sort
            order for YouTube Analytics data. By default the sort order is ascending.
            The '`-`' prefix causes descending sort order.",
            pattern: [-0-9a-zA-Z,]+
          in: query
          name: sort
          schema:
            type: string
        - description: |-
            The start date for fetching YouTube Analytics data. The value should be in
            `YYYY-MM-DD` format.
            required: true, pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}
          in: query
          name: startDate
          schema:
            type: string
        - description: |-
            An index of the first entity to retrieve. Use this parameter as a
            pagination mechanism along with the max-results parameter (one-based,
            inclusive).",
            minValue: 1
          in: query
          name: startIndex
          schema:
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtube.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtube.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/youtubepartner'
          Oauth2c:
            - 'https://www.googleapis.com/auth/youtubepartner'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics-monetary.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/yt-analytics.readonly'
      tags:
        - reports
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - '1'
          - '2'
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        default: json
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        default: true
        type: boolean
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  requestBodies:
    Group:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
  schemas:
    EmptyResponse:
      description: Empty response.
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
          description: Apiary error details
      type: object
    ErrorProto:
      description: Describes one specific error.
      properties:
        argument:
          description: |-
            Error arguments, to be used when building user-friendly error messages
            given the error domain and code.  Different error codes require different
            arguments.
          items:
            type: string
          type: array
        code:
          description: |-
            Error code in the error domain. This should correspond to
            a value of the enum type whose name is in domain. See
            the core error domain in error_domain.proto.
          type: string
        debugInfo:
          description: |-
            Debugging information, which should not be
            shared externally.
          type: string
        domain:
          description: |-
            Error domain. RoSy services can define their own
            domain and error codes. This should normally be
            the name of an enum type, such as: gdata.CoreErrorDomain
          type: string
        externalErrorMessage:
          description: |-
            A short explanation for the error, which can be shared outside Google.

            Please set domain, code and arguments whenever possible instead of this
            error message so that external APIs can build safe error messages
            themselves.

            External messages built in a RoSy interface will most likely refer to
            information and concepts that are not available externally and should not
            be exposed. It is safer if external APIs can understand the errors and
            decide what the error message should look like.
          type: string
        location:
          description: |-
            Location of the error, as specified by the location type.

            If location_type is PATH, this should be a path to a field that's
            relative to the request, using FieldPath notation
            (net/proto2/util/public/field_path.h).

            Examples:
              authenticated_user.gaia_id
              resource.address[2].country
          type: string
        locationType:
          enum:
            - PATH
            - OTHER
            - PARAMETER
          type: string
      type: object
    Errors:
      description: |-
        Request Error information.

        The presence of an error field signals that the operation
        has failed.
      properties:
        code:
          description: |-
            Global error code. Deprecated and ignored.
            Set custom error codes in ErrorProto.domain and ErrorProto.code
            instead.
          enum:
            - BAD_REQUEST
            - FORBIDDEN
            - NOT_FOUND
            - CONFLICT
            - GONE
            - PRECONDITION_FAILED
            - INTERNAL_ERROR
            - SERVICE_UNAVAILABLE
          type: string
        error:
          description: Specific error description and codes
          items:
            $ref: '#/components/schemas/ErrorProto'
          type: array
        requestId:
          description: |-
            Request identifier generated by the service, which can be
            used to identify the error in the logs
          type: string
      type: object
    Group:
      description: A group.
      properties:
        contentDetails:
          $ref: '#/components/schemas/GroupContentDetails'
          description: |-
            The `contentDetails` object contains additional information about the
            group, such as the number and type of items that it contains.
        errors:
          $ref: '#/components/schemas/Errors'
          description: Apiary error details
        etag:
          description: The Etag of this resource.
          type: string
        id:
          description: The ID that YouTube uses to uniquely identify the group.
          type: string
        kind:
          description: 'Identifies the API resource''s type. The value will be `youtube#group`.'
          type: string
        snippet:
          $ref: '#/components/schemas/GroupSnippet'
          description: |-
            The `snippet` object contains basic information about the group, including
            its creation date and name.
      type: object
    GroupContentDetails:
      description: A group's content details.
      properties:
        itemCount:
          description: The number of items in the group.
          format: uint64
          type: string
        itemType:
          description: |-
            The type of resources that the group contains.

            Valid values for this property are:
             * `youtube#channel`
             * `youtube#playlist`
             * `youtube#video`
             * `youtubePartner#asset`
          type: string
      type: object
    GroupItem:
      description: A group item.
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
          description: Apiary error details
        etag:
          description: The Etag of this resource.
          type: string
        groupId:
          description: |-
            The ID that YouTube uses to uniquely identify the group that contains the
            item.
          type: string
        id:
          description: |-
            The ID that YouTube uses to uniquely identify the `channel`, `video`,
            `playlist`, or `asset` resource that is included in the group. Note that
            this ID refers specifically to the inclusion of that resource in a
            particular group and is different than the channel ID, video ID,
            playlist ID, or asset ID that uniquely identifies the resource itself.
            The `resource.id` property's value specifies the unique channel, video,
            playlist, or asset ID.
          type: string
        kind:
          description: 'Identifies the API resource''s type. The value will be `youtube#groupItem`.'
          type: string
        resource:
          $ref: '#/components/schemas/GroupItemResource'
          description: |-
            The `resource` object contains information that identifies the item being
            added to the group.
      type: object
    GroupItemResource:
      properties:
        id:
          description: |-
            The channel, video, playlist, or asset ID that YouTube uses to uniquely
            identify the item that is being added to the group.
          type: string
        kind:
          description: |-
            Identifies the type of resource being added to the group.

            Valid values for this property are:
             * `youtube#channel`
             * `youtube#playlist`
             * `youtube#video`
             * `youtubePartner#asset`
          type: string
      type: object
    GroupSnippet:
      description: A group snippet.
      properties:
        publishedAt:
          description: |-
            The date and time that the group was created. The value is specified in
            ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
          format: google-datetime
          type: string
        title:
          description: The group name. The value must be a non-empty string.
          type: string
      type: object
    ListGroupItemsResponse:
      description: Response message for GroupsService.ListGroupItems.
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
          description: Apiary error details
        etag:
          description: The Etag of this resource.
          type: string
        items:
          description: |-
            A list of groups that match the API request parameters. Each item in the
            list represents a `groupItem` resource.
          items:
            $ref: '#/components/schemas/GroupItem'
          type: array
        kind:
          description: |-
            Identifies the API resource's type. The value will be
            `youtube#groupItemListResponse`.
          type: string
      type: object
    ListGroupsResponse:
      description: Response message for GroupsService.ListGroups.
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
          description: Apiary error details
        etag:
          description: The Etag of this resource.
          type: string
        items:
          description: |-
            A list of groups that match the API request parameters. Each item in the
            list represents a `group` resource.
          items:
            $ref: '#/components/schemas/Group'
          type: array
        kind:
          description: |-
            Identifies the API resource's type. The value will be
            `youtube#groupListResponse`.
          type: string
        nextPageToken:
          description: |-
            The token that can be used as the value of the `pageToken` parameter to
            retrieve the next page in the result set.
          type: string
      type: object
    QueryResponse:
      description: Response message for TargetedQueriesService.Query.
      properties:
        columnHeaders:
          description: |-
            This value specifies information about the data returned in the `rows`
            fields. Each item in the `columnHeaders` list identifies a field returned
            in the `rows` value, which contains a list of comma-delimited data. The
            `columnHeaders` list will begin with the dimensions specified in the API
            request, which will be followed by the metrics specified in the API
            request. The order of both dimensions and metrics will match the ordering
            in the API request. For example, if the API request contains the parameters
            `dimensions=ageGroup,gender&metrics=viewerPercentage`, the API response
            will return columns in this order: `ageGroup`, `gender`,
            `viewerPercentage`.
          items:
            $ref: '#/components/schemas/ResultTableColumnHeader'
          type: array
        errors:
          $ref: '#/components/schemas/Errors'
          description: 'When set, indicates that the operation failed.'
        kind:
          description: |-
            This value specifies the type of data included in the API response.
            For the query method, the kind property value will be
            `youtubeAnalytics#resultTable`.
          type: string
        rows:
          description: |-
            The list contains all rows of the result table. Each item in the list is
            an array that contains comma-delimited data corresponding to a single row
            of data. The order of the comma-delimited data fields will match the
            order of the columns listed in the `columnHeaders` field.

            If no data is available for the given query, the `rows` element will be
            omitted from the response.

            The response for a query with the `day` dimension will not contain rows for
            the most recent days.
          items:
            items: {}
            type: array
          type: array
      type: object
    ResultTableColumnHeader:
      description: The description of a column of the result table.
      properties:
        columnType:
          description: The type of the column (`DIMENSION` or `METRIC`).
          type: string
        dataType:
          description: 'The type of the data in the column (`STRING`, `INTEGER`, `FLOAT`, etc.).'
          type: string
        name:
          description: The name of the dimension or metric.
          type: string
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes:
            'https://www.googleapis.com/auth/youtube': Manage your YouTube account
            'https://www.googleapis.com/auth/youtube.readonly': View your YouTube account
            'https://www.googleapis.com/auth/youtubepartner': View and manage your assets and associated content on YouTube
            'https://www.googleapis.com/auth/yt-analytics-monetary.readonly': View monetary and non-monetary YouTube Analytics reports for your YouTube content
            'https://www.googleapis.com/auth/yt-analytics.readonly': View YouTube Analytics reports for your YouTube content
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes:
            'https://www.googleapis.com/auth/youtube': Manage your YouTube account
            'https://www.googleapis.com/auth/youtube.readonly': View your YouTube account
            'https://www.googleapis.com/auth/youtubepartner': View and manage your assets and associated content on YouTube
            'https://www.googleapis.com/auth/yt-analytics-monetary.readonly': View monetary and non-monetary YouTube Analytics reports for your YouTube content
            'https://www.googleapis.com/auth/yt-analytics.readonly': View YouTube Analytics reports for your YouTube content
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
      type: oauth2
