openapi: 3.0.0
servers:
  - url: 'https://api.shutterstock.com'
info:
  contact:
    x-twitter: Shutterstock
  description: 'The Shutterstock API provides access to Shutterstock''s library of media, as well as information about customers'' accounts and the contributors that provide the media.'
  title: Shutterstock API Explorer
  version: 1.0.16
  x-apisguru-categories:
    - media
  x-logo:
    url: 'https://twitter.com/Shutterstock/profile_image?size=original'
  x-origin:
    - format: openapi
      url: 'https://api-explorer.shutterstock.com/openapi.json'
      version: '3.0'
  x-providerName: shutterstock.com
paths:
  /v2/audio:
    get:
      description: 'This endpoint lists information about one or more audio tracks, including the description and publication date.'
      operationId: getTrackList
      parameters:
        - description: One or more audio IDs
          example:
            - '442583'
            - '434750'
          in: query
          name: id
          required: true
          schema:
            items:
              type: string
            minItems: 1
            type: array
        - description: Amount of detail to render in the response
          example: full
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - added_date: '2016-04-12'
                        album:
                          id: ''
                          title: ''
                        artists:
                          - name: Fin Productions
                        assets:
                          clean_audio:
                            file_size: 30760372
                          preview_mp3:
                            file_size: 3846606
                            url: 'https://ak.picdn.net/shutterstock/audio/434750/preview/preview.mp3'
                          preview_ogg:
                            file_size: 4402608
                            url: 'https://ak.picdn.net/shutterstock/audio/434750/preview/preview.ogg'
                          waveform:
                            file_size: 19822
                            url: 'https://ak.picdn.net/shutterstock/audio/434750/waveform/waveform.png'
                        bpm: 100
                        contributor:
                          id: '2847971'
                        description: 'Pulsing and feel-good, featuring slick electric guitar, synthesizer, bass, electronic drum pads and drums that create a positive, celebratory mood.'
                        duration: 160
                        genres:
                          - Dance/Electronic
                          - Electro Pop
                          - Pop/Rock
                        id: '434750'
                        instruments:
                          - Bass
                          - Drums
                          - Electric guitar
                          - Pads
                          - Percussion
                          - Synthesizer
                        is_adult: false
                        is_instrumental: true
                        isrc: ''
                        keywords:
                          - breezy
                          - celebration
                          - festive
                          - good times
                          - hopeful
                          - optimistic
                          - party
                          - positive
                          - reflective
                        language: en
                        lyrics: ''
                        media_type: audio
                        moods:
                          - Bright
                          - Confident
                          - Fun
                          - Happy
                          - Inspiring
                          - Optimistic
                          - Playful
                          - Sophisticated
                          - Stylish
                          - Uplifting
                        published_time: '2016-04-12T17:45:29-04:00'
                        recording_version: ''
                        releases: []
                        similar_artists: []
                        title: Fresh Love
                        updated_time: '2016-08-18T18:03:11-04:00'
                        url: 'https://www.shutterstock.com/music/track/another-tomorrow/442583'
                        vocal_description: ''
              schema:
                $ref: '#/components/schemas/AudioDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio tracks
      tags:
        - audio
  /v2/audio/collections:
    get:
      description: This endpoint lists your collections of audio tracks and their basic attributes.
      operationId: getSoundboxList
      parameters:
        - description: Page number
          example: '1'
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          example: '100'
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - created_time: '2014-11-05T19:29:56-05:00'
                        id: '5747953'
                        name: Test Collection cdad
                        total_item_count: 0
                        updated_time: '2014-11-05T19:29:56-05:00'
                      - created_time: '2014-11-05T19:29:56-05:00'
                        id: '5747955'
                        name: Test Collection ff5f
                        total_item_count: 0
                        updated_time: '2014-11-05T19:29:56-05:00'
                      - created_time: '2014-11-05T19:29:58-05:00'
                        id: '5747957'
                        name: Updated Collection ebc4
                        total_item_count: 0
                        updated_time: '2014-11-05T19:29:58-05:00'
                      - created_time: '2014-11-05T19:32:13-05:00'
                        id: '5747971'
                        name: Test Collection 0072
                        total_item_count: 0
                        updated_time: '2014-11-05T19:32:13-05:00'
                      - created_time: '2014-11-05T19:32:13-05:00'
                        id: '5747973'
                        name: Test Collection d332
                        total_item_count: 0
                        updated_time: '2014-11-05T19:32:13-05:00'
              schema:
                $ref: '#/components/schemas/CollectionDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: List audio collections
      tags:
        - audio
    post:
      description: 'This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`.'
      operationId: createSoundbox
      requestBody:
        content:
          application/json:
            examples:
              default:
                description: Create a soundbox
                value:
                  name: Best rock music
            schema:
              $ref: '#/components/schemas/CollectionCreateRequest'
        description: Collection metadata
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionCreateResponse'
          description: No response was specified
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    id: '48433105'
          description: Successfully created collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Create audio collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "Best rock music"
            }'

            curl -X POST https://api.shutterstock.com/v2/audio/collections \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const body = {
              "name": "Best rock music"
            };

            audioApi.createSoundbox(body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "Best rock music"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/audio/collections/{id}':
    delete:
      description: This endpoint deletes a collection.
      operationId: deleteSoundbox
      parameters:
        - description: Collection ID
          example: '48433111'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully deleted collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Delete audio collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            curl -X DELETE https://api.shutterstock.com/v2/audio/collections/48433111 \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433107";

            audioApi.deleteSoundbox(collectionId)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433111",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
    get:
      description: 'This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`.'
      operationId: getSoundbox
      parameters:
        - description: Collection ID
          example: '48433107'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    id: '48433107'
                    name: Test Collection c28c
                    total_item_count: 0
                    updated_time: '2016-08-18T18:52:56-04:00'
              schema:
                $ref: '#/components/schemas/Collection'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the details of audio collections
      tags:
        - audio
    post:
      description: This endpoint sets a new name for a collection.
      operationId: renameSoundbox
      parameters:
        - description: Collection ID
          example: '48433107'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                description: Renaming a soundbox
                value:
                  name: Best rock music
            schema:
              $ref: '#/components/schemas/CollectionUpdateRequest'
        description: Collection changes
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully updated collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Rename audio collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "Best rock music"
            }'

            curl -X POST https://api.shutterstock.com/v2/audio/collections/48433107 \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433107";

            const body = {
              "name": "Best rock music"
            };

            audioApi.renameSoundbox(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "Best rock music"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433107",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/audio/collections/{id}/items':
    delete:
      description: This endpoint removes one or more tracks from a collection.
      operationId: deleteSoundboxItems
      parameters:
        - description: Collection ID
          example: '48433119'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: One or more item IDs to remove from the collection
          example:
            - '76688182'
            - '40005859'
          in: query
          name: item_id
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully removed collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Remove audio tracks from collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            curl -X DELETE https://api.shutterstock.com/v2/audio/collections/48433119/items?item_id=36345523 \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433119";

            // Array of tracks to remove
            const tracksToRemove = {
              "item_id": [
                "76688182",
                "40005859"
              ]
            };

            audioApi.deleteSoundboxItems(collectionId, tracksToRemove)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433119/items?item_id=495863218",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
    get:
      description: This endpoint lists the IDs of tracks in a collection and the date that each was added.
      operationId: getSoundboxItems
      parameters:
        - description: Collection ID
          example: '48433113'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
        - description: Sort order
          in: query
          name: sort
          schema:
            default: oldest
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - added_time: '2016-08-18T18:52:59-04:00'
                        id: '76688182'
                        media_type: audio
                      - added_time: '2016-08-18T18:52:59-04:00'
                        id: '40005859'
                        media_type: audio
                    page: 1
                    per_page: 100
              schema:
                $ref: '#/components/schemas/CollectionItemDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the contents of audio collections
      tags:
        - audio
    post:
      description: This endpoint adds one or more tracks to a collection by track IDs.
      operationId: addSoundboxItems
      parameters:
        - description: Collection ID
          example: '48433115'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                description: Adds tracks to a soundbox
                value:
                  items:
                    - id: '442583'
                    - id: '7491192'
            schema:
              $ref: '#/components/schemas/CollectionItemRequest'
        description: List of items to add to collection
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully added collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Add audio tracks to collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "items": [
                {
                  "id": "442583"
                },
                {
                  "id": "7491192"
                }
              ]
            }'

            curl -X POST https://api.shutterstock.com/v2/audio/collections/48433115/items \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433115";

            const body = {
              "items": [
                {
                  "id": "442583"
                },
                {
                  "id": "7491192"
                }
              ]
            };

            audioApi.addSoundboxItems(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "items" => [
                [
                  "id" => "442583"
                ],
                [
                  "id" => "7491192"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433115/items",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/audio/genres:
    get:
      description: This endpoint returns a list of all audio genres.
      operationId: getGenres
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - Rock
              schema:
                $ref: '#/components/schemas/GenreList'
          description: OK
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio genres
      tags:
        - audio
  /v2/audio/instruments:
    get:
      description: This endpoint returns a list of all audio instruments.
      operationId: getInstruments
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - Electric Guitar
              schema:
                $ref: '#/components/schemas/InstrumentList'
          description: OK
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio instruments
      tags:
        - audio
  /v2/audio/licenses:
    get:
      description: This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
      operationId: getAudioLicenseList
      parameters:
        - description: Show licenses for the specified track ID
          example: '1'
          in: query
          name: audio_id
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadHistoryDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List audio licenses
      tags:
        - audio
    post:
      description: This endpoint gets licenses for one or more tracks.
      operationId: licenseTrack
      parameters:
        - description: License type
          in: query
          name: license
          schema:
            default: audio_standard
            enum:
              - audio_standard
              - audio_enhanced
              - audio_platform
              - premier_music_basic
              - premier_music_extended
              - premier_music_pro
              - premier_music_comp
            type: string
        - description: The ID of the search that led to licensing this track
          in: query
          name: search_id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                description: Overwrite content of soundbox with new items
                value:
                  audio:
                    - audio_id: '591623'
                      license: audio_standard
                      metadata:
                        customer_id: '12345'
            schema:
              $ref: '#/components/schemas/LicenseAudioRequest'
        description: Tracks to license
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - audio_id: '1'
                        download:
                          url: 'http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav'
              schema:
                $ref: '#/components/schemas/LicenseAudioResultDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
      summary: License audio tracks
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |
            DATA='{
              "audio": [
                {
                  "audio_id": "591623",
                  "license": "audio_standard",
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            }'

            curl -X POST https://api.shutterstock.com/v2/audio/licenses \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const body = {
              "audio": [
                {
                  "audio_id": "446348",
                  "license": "premier_music_comp",
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            };

            audioApi.licenseTrack(body)
              .then(({ data }) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "audio" => [
                [
                  "audio_id" => "591623",
                  "license" => "audio_standard",
                  "metadata" => [
                  "customer_id" => "12345"
                  ]
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/licenses",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/audio/licenses/{id}/downloads':
    post:
      description: This endpoint redownloads tracks that you have already received a license for.
      operationId: downloadTracks
      parameters:
        - description: License ID
          example: i1188641348
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Url'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: Download audio tracks
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            curl -X POST https://api.shutterstock.com/v2/audio/licenses/i1188641348/downloads \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const licenseId = "i1188641348"; // license ID, not track ID

            audioApi.downloadTracks(licenseId)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/licenses/i1188641348/downloads",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/audio/moods:
    get:
      description: This endpoint returns a list of all audio moods.
      operationId: getMoods
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - Aggressive
              schema:
                $ref: '#/components/schemas/MoodList'
          description: OK
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio moods
      tags:
        - audio
  /v2/audio/search:
    get:
      description: 'This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.'
      operationId: searchAudio
      parameters:
        - description: Show tracks with one of the specified artist names or IDs
          in: query
          name: artists
          schema:
            items:
              type: string
            type: array
            uniqueItems: false
        - deprecated: true
          description: (Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute
          in: query
          name: bpm
          schema:
            type: integer
            uniqueItems: true
        - description: Show tracks with the specified beats per minute or faster
          in: query
          name: bpm_from
          schema:
            type: integer
            uniqueItems: true
        - description: Show tracks with the specified beats per minute or slower
          in: query
          name: bpm_to
          schema:
            type: integer
            uniqueItems: true
        - description: Show tracks with the specified duration (seconds)
          in: query
          name: duration
          schema:
            type: integer
            uniqueItems: true
        - description: Show tracks with the specified duration or longer (seconds)
          in: query
          name: duration_from
          schema:
            type: integer
            uniqueItems: true
        - description: Show tracks with the specified duration or shorter (seconds)
          in: query
          name: duration_to
          schema:
            type: integer
            uniqueItems: true
        - description: 'Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`'
          example:
            - Classical
            - Holiday
          explode: true
          in: query
          name: genre
          schema:
            items:
              type: string
            type: array
            uniqueItems: false
        - description: Show instrumental music only
          in: query
          name: is_instrumental
          schema:
            type: boolean
            uniqueItems: true
        - description: 'Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`'
          example:
            - Trumpet
            - Percussion
          explode: true
          in: query
          name: instruments
          schema:
            items:
              type: string
            type: array
            uniqueItems: false
        - description: 'Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`'
          example:
            - Confident
            - Playful
          explode: true
          in: query
          name: moods
          schema:
            items:
              type: string
            type: array
            uniqueItems: false
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
            uniqueItems: true
        - description: Number of results per page
          example: 1
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 0
            type: integer
            uniqueItems: true
        - description: One or more search terms separated by spaces
          example: drum
          in: query
          name: query
          schema:
            type: string
            uniqueItems: true
        - description: Sort by
          in: query
          name: sort
          schema:
            enum:
              - score
              - ranking_all
              - artist
              - title
              - bpm
              - freshness
              - duration
            type: string
            uniqueItems: true
        - description: 'Sort order, asc or desc'
          in: query
          name: sort_order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
            uniqueItems: true
        - description: 'Show tracks with the specified vocal description (male, female)'
          in: query
          name: vocal_description
          schema:
            type: string
            uniqueItems: true
        - description: Amount of detail to render in the response
          example: full
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
            uniqueItems: true
        - description: Fields to display in the response; see the documentation for the fields parameter in the overview section
          in: query
          name: fields
          schema:
            type: string
            uniqueItems: true
        - description: Which library to search
          in: query
          name: library
          schema:
            default: premier
            enum:
              - shutterstock
              - premier
            type: string
            uniqueItems: true
        - description: Which language to search in
          in: query
          name: language
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    added_date: '2016-08-16'
                    album:
                      id: ''
                      title: ''
                    artists:
                      - name: Klimenko Music
                    assets:
                      clean_audio:
                        file_size: 35188408
                      preview_mp3:
                        file_size: 4400203
                        url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3'
                      preview_ogg:
                        file_size: 4453197
                        url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg'
                      waveform:
                        file_size: 18778
                        url: 'https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png'
                    bpm: 110
                    contributor:
                      id: '2847971'
                    description: 'Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.'
                    duration: 183
                    genres:
                      - Dance/Electronic
                      - Electro Pop
                      - Pop/Rock
                    id: '442583'
                    instruments:
                      - Piano
                      - Synth bass
                      - Synth drums
                      - Synthesizer
                    is_adult: false
                    is_instrumental: true
                    isrc: ''
                    keywords:
                      - celebratory
                      - chic
                      - euphoric
                      - good times
                      - hip
                      - optimistic
                      - party
                      - soaring
                      - upbeat
                    language: en
                    lyrics: ''
                    media_type: audio
                    moods:
                      - Bright
                      - Confident
                      - Fun
                      - Happy
                      - Inspiring
                      - Optimistic
                      - Playful
                      - Sophisticated
                      - Stylish
                      - Uplifting
                    published_time: '2016-08-16T14:30:03-04:00'
                    recording_version: ''
                    releases: []
                    similar_artists: []
                    title: Another Tomorrow
                    updated_time: '2016-08-18T17:59:33-04:00'
                    url: 'https://www.shutterstock.com/music/track/another-tomorrow/442583'
                    vocal_description: ''
              schema:
                $ref: '#/components/schemas/AudioSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search for tracks
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET "https://api.shutterstock.com/v2/audio/search" \
            --header "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "query=bluegrass" \
            --data-urlencode "duration_from=60" \
            --data-urlencode "moods=uplifting"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const queryParams = {
              "query": "bluegrass",
              "duration_from": 60,
              "moods": ["uplifting"]
            };

            audioApi.searchAudio(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "bluegrass",
              "duration_from" => 60,
              "moods" => "uplifting"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/audio/{id}':
    get:
      description: 'This endpoint shows information about a track, including its genres, instruments, and other attributes.'
      operationId: getTrack
      parameters:
        - description: Audio track ID
          example: '442583'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Amount of detail to render in the response
          example: full
          in: query
          name: view
          schema:
            default: full
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    added_date: '2016-08-16'
                    album:
                      id: ''
                      title: ''
                    artists:
                      - name: Klimenko Music
                    assets:
                      clean_audio:
                        file_size: 35188408
                      preview_mp3:
                        file_size: 4400203
                        url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3'
                      preview_ogg:
                        file_size: 4453197
                        url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg'
                      waveform:
                        file_size: 18778
                        url: 'https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png'
                    bpm: 110
                    contributor:
                      id: '2847971'
                    description: 'Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.'
                    duration: 183
                    genres:
                      - Dance/Electronic
                      - Electro Pop
                      - Pop/Rock
                    id: '442583'
                    instruments:
                      - Piano
                      - Synth bass
                      - Synth drums
                      - Synthesizer
                    is_adult: false
                    is_instrumental: true
                    isrc: ''
                    keywords:
                      - celebratory
                      - chic
                      - euphoric
                      - good times
                      - hip
                      - optimistic
                      - party
                      - soaring
                      - upbeat
                    language: en
                    lyrics: ''
                    media_type: audio
                    moods:
                      - Bright
                      - Confident
                      - Fun
                      - Happy
                      - Inspiring
                      - Optimistic
                      - Playful
                      - Sophisticated
                      - Stylish
                      - Uplifting
                    published_time: '2016-08-16T14:30:03-04:00'
                    recording_version: ''
                    releases: []
                    similar_artists: []
                    title: Another Tomorrow
                    updated_time: '2016-08-18T17:59:33-04:00'
                    url: 'https://www.shutterstock.com/music/track/another-tomorrow/442583'
                    vocal_description: ''
              schema:
                $ref: '#/components/schemas/Audio'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about audio tracks
      tags:
        - audio
  /v2/contributors:
    get:
      description: 'This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.'
      operationId: getContributorList
      parameters:
        - description: One or more contributor IDs
          example:
            - 800506
            - 1653538
          in: query
          name: id
          required: true
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - about: 'Dave is a self confessed emotional photographer, capturing, keeping and sharing images for the stories of the wild that they convey.'
                        contributor_type:
                          - illustrator
                          - videographer
                        display_name: Dave Pusey
                        equipment:
                          - Both Canon & Nikon
                        id: '800506'
                        location: za
                        portfolio_url: 'http://www.shutterstock.com/g/davep'
                        social_media:
                          facebook: pages/Dave-Pusey-Photography/131399733564475
                        styles:
                          - black_and_white
                          - landscape
                          - nature
                        subjects:
                          - animals
                          - holiday
                          - nature
                          - travel
                          - wildlife
                        website: leovantage.com
              schema:
                $ref: '#/components/schemas/ContributorProfileDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Get details about multiple contributors
      tags:
        - contributors
  '/v2/contributors/{contributor_id}':
    get:
      description: 'This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.'
      operationId: getContributor
      parameters:
        - description: Contributor ID
          example: 1653538
          in: path
          name: contributor_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    about: A 18 year old photographer living in Amsterdam.
                    contributor_type:
                      - photographer
                      - illustrator
                      - videographer
                    display_name: Mees Kuiper
                    equipment:
                      - Nikon D7000
                      - Nikkor 70-300mm
                      - Nikkor 24-70mm
                    id: '1653538'
                    location: nl
                    portfolio_url: 'http://www.shutterstock.com/g/Mees Kuiper'
                    social_media: {}
                    styles: []
                    subjects:
                      - animals
                      - buildings
                      - nature
                      - people
                      - wildlife
              schema:
                $ref: '#/components/schemas/ContributorProfile'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Get details about a single contributor
      tags:
        - contributors
  '/v2/contributors/{contributor_id}/collections':
    get:
      description: This endpoint lists collections based on contributor ID.
      operationId: getContributorCollectionsList
      parameters:
        - description: Contributor ID
          example: 800506
          in: path
          name: contributor_id
          required: true
          schema:
            type: string
        - description: Sort order
          in: query
          name: sort
          schema:
            enum:
              - newest
              - last_updated
              - item_count
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - cover_item:
                          id: '87672997'
                          media_type: image
                        created_time: '2012-04-07T02:07:28-04:00'
                        id: '135931'
                        name: Lion Cubs
                        total_item_count: 10
                        updated_time: '2014-05-01T05:22:07-04:00'
                      - cover_item:
                          id: '79489261'
                          media_type: image
                        created_time: '2014-05-01T05:23:20-04:00'
                        id: '1991564'
                        name: African Landscapes
                        total_item_count: 5
                        updated_time: '2014-05-01T05:38:34-04:00'
              schema:
                $ref: '#/components/schemas/CollectionDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Contributor not found
      security:
        - customer_accessCode: []
      summary: List contributors' collections
      tags:
        - contributors
  '/v2/contributors/{contributor_id}/collections/{id}':
    get:
      description: 'This endpoint gets more detailed information about a contributor''s collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.'
      operationId: getContributorCollections
      parameters:
        - description: Contributor ID
          example: 800506
          in: path
          name: contributor_id
          required: true
          schema:
            type: string
        - description: Collection ID that belongs to the contributor
          example: 1991678
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    cover_item:
                      id: '168592952'
                      media_type: image
                    id: '1991678'
                    name: Baby Elephants
                    total_item_count: 3
                    updated_time: '2014-05-01T05:50:21-04:00'
              schema:
                $ref: '#/components/schemas/Collection'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Set not found
      security:
        - customer_accessCode: []
      summary: Get details about contributors' collections
      tags:
        - contributors
  '/v2/contributors/{contributor_id}/collections/{id}/items':
    get:
      description: This endpoint lists the IDs of items in a contributor's collection and the date that each was added.
      operationId: getContributorCollectionItems
      parameters:
        - description: Contributor ID
          example: 800506
          in: path
          name: contributor_id
          required: true
          schema:
            type: string
        - description: Collection ID that belongs to the contributor
          example: 1991678
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 50
            minimum: 1
            type: integer
        - description: Sort order
          in: query
          name: sort
          schema:
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - added_time: '2014-05-01T05:49:46-04:00'
                        id: '168592952'
                        media_type: image
                      - added_time: '2014-05-01T05:49:59-04:00'
                        id: '88269310'
                        media_type: image
                      - added_time: '2014-05-01T05:50:21-04:00'
                        id: '94373977'
                        media_type: image
              schema:
                $ref: '#/components/schemas/CollectionItemDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Set not found
      security:
        - customer_accessCode: []
      summary: Get the items in contributors' collections
      tags:
        - contributors
  /v2/cv/images:
    post:
      description: 'This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.'
      operationId: uploadImage
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  base64_image: R0lGODlhgACAAPcAAEwiBLyaLOzNUNmWFNjOrNSuN7x6PPzqeOTMgfKSDMyuTPzwsdi2dHwuBPzbVu
            schema:
              $ref: '#/components/schemas/ImageCreateRequest'
        description: The image data as a base64 string
        required: true
      responses:
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    upload_id: Udb14e1c3540bdbf82b4b3fe12d3a44f2
              schema:
                description: Computer vision image upload information
                properties:
                  upload_id:
                    type: string
                required:
                  - upload_id
                type: object
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '413':
          description: Payload Too Large
        '415':
          description: Unsupported Media Type
      security:
        - basic: []
        - customer_accessCode: []
      summary: Upload images
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: |
            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images' \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -H 'Content-Type: application/json' \
            -d "{\"base64_image\":\"`base64 myImage.jpg`\"}")

            echo "The next step requires the jq program."

            UPLOAD_ID=$(jq -r .upload_id <<< $RESPONSE)

            curl -X GET https://api.shutterstock.com/v2/cv/similar/images \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "asset_type=images" \
            --data-urlencode "asset_id=$UPLOAD_ID"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const computerVisionApi = new sstk.CvApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            computerVisionApi.uploadImage(body)
              .then((data) => {
                console.log(data.upload_id);
                return computerVisionApi.getSimilarImages({
                  "asset_type": "images",
                  "asset_id": data.upload_id
                });
              })
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $uploadBody = [
              "base64_image" => $encodedImageData
            ];
            $uploadEncodedBody = json_encode($uploadBody);

            $uploadOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $uploadEncodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $uploadOptions);
            $uploadResponse = curl_exec($handle);
            curl_close($handle);

            $uploadDecodedResponse = json_decode($uploadResponse);
            print_r($uploadDecodedResponse->upload_id);

            $similarQuery = [
              "asset_type" => "images",
              "asset_id" => $uploadDecodedResponse->upload_id,
            ];

            $similarOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/similar/images?" . http_build_query($similarQuery),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $similarOptions);
            $similarResponse = curl_exec($handle);
            curl_close($handle);

            print_r($similarResponse);
  /v2/cv/similar/images:
    get:
      description: This endpoint returns images that are visually similar to an image that you specify or upload.
      operationId: getSimilarImages
      parameters:
        - description: The asset ID or upload ID to find similar videos for
          example: U123456
          in: query
          name: asset_id
          required: true
          schema:
            type: string
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 1
            type: integer
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1
                        assets:
                          huge_thumb:
                            height: 260
                            url: 'https://image.shutterstock.com/image-vector/happy-halloween-vector-260nw-224429596.jpg'
                            width: 260
                          large_thumb:
                            height: 150
                            url: 'https://thumb1.shutterstock.com/thumb_large/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg'
                            width: 150
                          preview:
                            height: 450
                            url: 'https://image.shutterstock.com/display_pic_with_logo/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg'
                            width: 450
                          small_thumb:
                            height: 100
                            url: 'https://thumb1.shutterstock.com/thumb_small/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg'
                            width: 100
                        contributor:
                          id: '302287'
                        description: Happy Halloween - vector
                        id: '224429596'
                        image_type: vector
                        media_type: image
                    page: 1
                    per_page: 1
                    search_id: ''
                    total_count: 200
              schema:
                $ref: '#/components/schemas/ImageSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar images
      tags:
        - computer_vision
  /v2/cv/similar/videos:
    get:
      description: This endpoint returns videos that are visually similar to an image that you specify or upload.
      operationId: getSimilarVideos
      parameters:
        - description: The asset ID or upload ID to find similar videos for
          example: U123456
          in: query
          name: asset_id
          required: true
          schema:
            type: string
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 1
            type: integer
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1.778
                        aspect_ratio: '16:9'
                        assets:
                          preview_jpg:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg'
                          preview_mp4:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4'
                          preview_webm:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm'
                          thumb_jpg:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg'
                          thumb_mp4:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4'
                          thumb_webm:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm'
                        contributor:
                          id: '178456'
                        description: 'The Concept of: Digitalization of Information Flow Moving Through Rack Servers in Data Center. Shot on RED EPIC-W 8K Helium Cinema Camera.'
                        duration: 19
                        id: '33248488'
                        media_type: video
                        url: 'https://www.shutterstock.com/video/clip-33248488'
                    page: 1
                    per_page: 1
                    search_id: ''
                    total_count: 200
              schema:
                $ref: '#/components/schemas/VideoSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar videos
      tags:
        - computer_vision
  /v2/editorial/licenses:
    post:
      description: This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license.
      operationId: licenseEditorialImage
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  country: USA
                  editorial:
                    - editorial_id: 8594090h
                      license: premier_editorial_comp
            schema:
              $ref: '#/components/schemas/LicenseEditorialContentRequest'
        description: License editorial content
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - download:
                          url: 'https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323'
                        editorial_id: '69656358'
              schema:
                $ref: '#/components/schemas/LicenseEditorialContentResultDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - customer_accessCode:
            - licenses.create
      summary: License editorial content
      tags:
        - editorial
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            }'

            curl -X POST https://api.shutterstock.com/v2/editorial/licenses \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const body = {
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            };

            editorialApi.licenseEditorialImage(body)
              .then(({ data }) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "editorial" => [
                [
                  "editorial_id" => "8594090h",
                  "license" => "premier_editorial_comp"
                ]
              ],
              "country" => "USA"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/licenses",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/editorial/livefeeds:
    get:
      operationId: getEditorialLivefeedList
      parameters:
        - description: Returns only livefeeds that are available for distribution in a certain country; specify with 3-letter ISO 3166-1 alpha-3 country code such as USA or DEU
          example: USA
          in: query
          name: country
          required: true
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 50
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - cover_item:
                          height: 170
                          id: 9938080a
                          url: 'https://editorial01.shutterstock.com/thumb/9938080a/532b2be1/Shutterstock_9938080a.jpg'
                          width: 113
                        created_time: '2018-10-19T20:27:26+00:00'
                        id: 2018%2F10%2F19%2F'Butterfly'%20photocall%2C%20Rome%20Film%20Festival
                        name: '''Butterfly'' photocall, Rome Film Festival'
                        total_item_count: 24
                    page: 1
                    per_page: 1
                    total_count: 6011
              schema:
                $ref: '#/components/schemas/EditorialLivefeedList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial livefeed list
      tags:
        - editorial
  '/v2/editorial/livefeeds/{id}':
    get:
      operationId: getEditorialLivefeed
      parameters:
        - description: Editorial livefeed ID; must be an URI encoded string
          example: 2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Returns only if the livefeed is available for distribution in a certain country; specify with 3-letter ISO 3166-1 alpha-3 country code such as USA or DEU
          example: USA
          in: query
          name: country
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    cover_item:
                      height: 170
                      id: 9938511p
                      url: 'https://editorial01.shutterstock.com/thumb/9938511p/7d1f17d9/Shutterstock_9938511p.jpg'
                      width: 114
                    id: 2018%2F10%2F19%2F'The%20House%20with%20a%20Clock%20in%20Its%20Walls'%20premiere%2C%20Rome%20Film%20Festival
                    name: '''The House with a Clock in Its Walls'' premiere, Rome Film Festival'
                    total_item_count: 100
              schema:
                $ref: '#/components/schemas/EditorialLivefeed'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial livefeed
      tags:
        - editorial
  '/v2/editorial/livefeeds/{id}/items':
    get:
      operationId: getEditorialLivefeedItems
      parameters:
        - description: Editorial livefeed ID; must be an URI encoded string
          example: 2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Returns only if the livefeed items are available for distribution in a certain country; specify with 3-letter ISO 3166-1 alpha-3 country code such as USA or DEU
          example: USA
          in: query
          name: country
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 0.666
                        assets:
                          medium_jpg:
                            display_name: Med
                            height: 1000
                            is_licensable: true
                            width: 660
                          original:
                            display_name: Original
                            height: 4928
                            is_licensable: true
                            width: 3280
                          small_jpg:
                            display_name: Small
                            height: 500
                            is_licensable: true
                            width: 332
                          thumb_170:
                            height: 170
                            url: 'https://editorial01.shutterstock.com/thumb/9938573m/4d5708ce/Shutterstock_9938573m.jpg'
                            width: 113
                          thumb_220:
                            height: 220
                            url: 'https://editorial01.shutterstock.com/thumb-220/9938573m/b78aabde/Shutterstock_9938573m.jpg'
                            width: 146
                          watermark_1500:
                            height: 1500
                            url: 'https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg'
                            width: 1040
                          watermark_450:
                            height: 450
                            url: 'https://editorial01.shutterstock.com/wm-preview-450/9938573m/4a9a4add/Shutterstock_9938573m.jpg'
                            width: 300
                        byline: Maurizio D'Avanzo/IPA/Shutterstock
                        caption: ''
                        categories:
                          - name: Actor
                          - name: Female
                          - name: Personality
                        date_taken: '2018-10-19'
                        description: Christian Marazziti and Ariadna Romero
                        id: 9938573m
                        keywords: []
                        title: '''The House with a Clock in Its Walls'' premiere, Rome Film Festival, Italy - 19 Oct 2018'
              schema:
                $ref: '#/components/schemas/EditorialContentDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial livefeed items
      tags:
        - editorial
  /v2/editorial/search:
    get:
      description: 'This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.'
      operationId: searchEditorial
      parameters:
        - description: One or more search terms separated by spaces
          in: query
          name: query
          schema:
            type: string
        - description: Sort by
          in: query
          name: sort
          schema:
            default: relevant
            enum:
              - relevant
              - newest
              - oldest
            type: string
        - description: Show editorial content within a certain editorial category; specify by category name
          in: query
          name: category
          schema:
            type: string
        - description: Show only editorial content that is available for distribution in a certain country; specify with 3-letter ISO 3166-1 alpha-3 country code such as USA or DEU
          example: USA
          in: query
          name: country
          required: true
          schema:
            type: string
        - description: Show only editorial content from certain suppliers
          in: query
          name: supplier_code
          schema:
            items:
              type: string
            type: array
        - description: 'Show only editorial content generated on or after a specific date, in the format of YYYY-MM-DD'
          in: query
          name: date_start
          schema:
            format: date
            type: string
        - description: 'Show only editorial content generated on or before a specific date, in the format of YYYY-MM-DD'
          in: query
          name: date_end
          schema:
            format: date
            type: string
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 50
            minimum: 1
            type: integer
        - description: The cursor of the page with which to start fetching results; this cursor is returned from previous requests
          in: query
          name: cursor
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1.481
                        assets:
                          medium_jpg:
                            display_name: Med
                            height: 675
                            is_licensable: true
                            width: 1000
                          original:
                            display_name: Original
                            height: 3263
                            is_licensable: true
                            width: 4831
                          small_jpg:
                            display_name: Small
                            height: 337
                            is_licensable: true
                            width: 500
                          thumb_170:
                            height: 115
                            url: 'https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg'
                            width: 170
                          thumb_220:
                            height: 149
                            url: 'https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg'
                            width: 220
                          watermark_1500:
                            height: 1500
                            url: 'https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg'
                            width: 1040
                          watermark_450:
                            height: 304
                            url: 'https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg'
                            width: 450
                        byline: ALEX HOFFORD/EPA-EFE/Shutterstock
                        caption: ''
                        categories: []
                        date_taken: '2018-08-24'
                        description: 'Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.'
                        id: 9804979n
                        keywords: []
                        title: 'Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018'
                    next: eyJ2IjoxLCJzIjoxfQ==
                    per_page: 1
                    prev: ''
                    search_id: q8igACM5gqQY75owjLoVvw
                    total_count: 1556949
              schema:
                $ref: '#/components/schemas/EditorialSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search editorial content
      tags:
        - editorial
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/editorial/search \
            -H "Accept: application/json" \
            -G \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            --data-urlencode "query=football" \
            --data-urlencode "country=USA" \
            --data-urlencode "sort=newest" \
            --data-urlencode "date_start=2018-10-23"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const queryParams = {
              "query": "football",
              "country": "USA",
              "sort": "newest",
              "date_start": "2018-10-23"
            };

            const country = "USA";

            editorialApi.searchEditorial(country, queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "football",
              "country" => "USA",
              "date_start" => "2018-10-23",
              "sort" => "newest"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/editorial/{id}':
    get:
      description: 'This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.'
      operationId: getEditorialImage
      parameters:
        - description: Editorial ID
          example: 9926131a
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Returns only if the content is available for distribution in a certain country; specify with 3-letter ISO 3166-1 alpha-3 country code such as USA or DEU
          example: USA
          in: query
          name: country
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    aspect: 1.33
                    assets:
                      medium_jpg:
                        display_name: Med
                        height: 751
                        is_licensable: true
                        width: 1000
                      original:
                        display_name: Original
                        height: 3447
                        is_licensable: true
                        width: 4586
                      small_jpg:
                        display_name: Small
                        height: 375
                        is_licensable: true
                        width: 500
                      thumb_170:
                        height: 128
                        url: 'https://editorial01.shutterstock.com/thumb/9767412v/36aeb953/Shutterstock_9767412v.jpg'
                        width: 170
                      thumb_220:
                        height: 165
                        url: 'https://editorial01.shutterstock.com/thumb-220/9767412v/b786b189/Shutterstock_9767412v.jpg'
                        width: 220
                      watermark_1500:
                        height: 1500
                        url: 'https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg'
                        width: 1040
                      watermark_450:
                        height: 338
                        url: 'https://editorial01.shutterstock.com/wm-preview-450/9767412v/f75b6680/Shutterstock_9767412v.jpg'
                        width: 450
                    byline: KIMIMASA MAYAMA/EPA-EFE/Shutterstock
                    caption: ''
                    categories: []
                    date_taken: '2018-07-22'
                    description: 'Tokyo 2020 Olympics mascot Miraitowa greets with former Japanese prime minister Yoshiko Mori, President of Tokyo 2020 Olympics Committee, as mascots of Tokyo 2020 Olympics and Paralympics debut in Tokyo, Japan, 22 July 2018. Tokyo 2020 Olympics will start on 24 July 2020 and run until 09 August 2020.'
                    id: 9767412v
                    keywords: []
                    title: 'Tokyo 2020 Olympics mascot Miraitowa and Paralympics mascot Someity debut, Japan - 22 Jul 2018'
              schema:
                $ref: '#/components/schemas/EditorialContent'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial content details
      tags:
        - editorial
  /v2/images:
    get:
      description: 'This endpoint lists information about one or more images, including the available sizes.'
      operationId: getImageList
      parameters:
        - description: One or more image IDs
          example:
            - '1110335168'
            - '465011609'
          in: query
          name: id
          required: true
          schema:
            items:
              type: string
            type: array
        - description: Amount of detail to render in the response
          example: minimal
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 0.8501
                        assets:
                          huge_thumb:
                            height: 260
                            url: 'https://image.shutterstock.com/image-vector/happy-mid-autumn-festival-background-260nw-465011609.jpg'
                            width: 221
                          large_thumb:
                            height: 150
                            url: 'https://thumb7.shutterstock.com/thumb_large/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg'
                            width: 128
                          preview:
                            height: 450
                            url: 'https://image.shutterstock.com/display_pic_with_logo/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg'
                            width: 382
                          small_thumb:
                            height: 100
                            url: 'https://thumb7.shutterstock.com/thumb_small/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg'
                            width: 85
                        contributor:
                          id: '1384888'
                        description: Happy Mid Autumn Festival background with golden glitter Moon and hand drawn Moon Rabbits. Vector illustration
                        id: '465011609'
                        image_type: vector
                        media_type: image
                        url: 'https://www.shutterstock.com/image-photo/465011609'
              schema:
                $ref: '#/components/schemas/ImageDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List images
      tags:
        - images
    post:
      deprecated: true
      description: 'Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.'
      operationId: uploadEphemeralImage
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  base64_image: R0lGODlhgACAAPcAAEwiBLyaLOzNUNmWFNjOrNSuN7x6PPzqeOTMgfKSDMyuTPzwsdi2dHwuBPzbVu
            schema:
              $ref: '#/components/schemas/ImageCreateRequest'
        description: The image data in JPEG or PNG format
        required: true
      responses:
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    id: Udb14e1c3540bdbf82b4b3fe12d3a44f2
              schema:
                $ref: '#/components/schemas/ImageCreateResponse'
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '413':
          description: Payload Too Large
      security:
        - basic: []
        - customer_accessCode: []
      summary: Upload ephemeral images
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: |
            curl -X POST 'https://api.shutterstock.com/v2/images' \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -H 'Content-Type: application/json' \
            -d "{\"base64_image\":\"`base64 myImage.jpg`\"}"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            const queryParams = {
              "page": 1,
              "per_page": 20,
              "view": "minimal"
            };

            imagesApi.uploadEphemeralImage(body)
              .then((data) => {
                console.log(data.id);
                return imagesApi.getSimilarImages(data.id, queryParams);
              })
              .then((similarImageData) => {
                console.log(similarImageData);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $body = [
              "base64_image" => $encodedImageData
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/images/categories:
    get:
      description: This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
      operationId: getImageCategories
      parameters:
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: '15'
                        name: Science
                      - id: '17'
                        name: Signs/Symbols
                      - id: '18'
                        name: Sports/Recreation
                      - id: '16'
                        name: Technology
                      - id: '0'
                        name: Transportation
              schema:
                $ref: '#/components/schemas/CategoryDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List image categories
      tags:
        - images
  /v2/images/collections:
    get:
      description: This endpoint lists your collections of images and their basic attributes.
      operationId: getLightboxList
      parameters:
        - description: 'Which sharing information to include in the response, such as a URL to the collection'
          example: share_code
          in: query
          name: embed
          schema:
            items:
              enum:
                - share_code
                - share_url
              type: string
            type: array
        - description: Page number
          example: 1
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 100'
          example: 2
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: '21663574'
                        items_updated_time: '2018-08-02T07:33:24-04:00'
                        name: Kittens and puppies
                        total_item_count: 0
                      - id: '21663571'
                        items_updated_time: '2018-08-02T07:33:22-04:00'
                        name: young couples
                        total_item_count: 0
              schema:
                $ref: '#/components/schemas/CollectionDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: List image collections
      tags:
        - images
    post:
      description: 'This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.'
      operationId: createLightbox
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  name: My collection
            schema:
              $ref: '#/components/schemas/CollectionCreateRequest'
        description: The names of the new collections
        required: true
      responses:
        '200':
          description: No response was specified
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    id: '101202664'
              schema:
                $ref: '#/components/schemas/CollectionCreateResponse'
          description: Creation successful
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Create image collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "My collection"
            }'

            curl -X POST https://api.shutterstock.com/v2/images/collections \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const body = {
              "name": "My collection"
            };

            imagesApi.createLightbox(body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "My collection"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/images/collections/featured:
    get:
      description: This endpoint lists featured collections of specific types and a name and cover image for each collection.
      operationId: getFeaturedLightboxList
      parameters:
        - description: 'Which sharing information to include in the response, such as a URL to the collection'
          example: share_url
          in: query
          name: embed
          schema:
            enum:
              - share_url
            type: string
        - description: The types of collections to return
          example: photo
          in: query
          name: type
          schema:
            items:
              enum:
                - photo
                - editorial
                - vector
              type: string
            type: array
        - description: 'Cover image size, defaults to 1x'
          example: share_url
          in: query
          name: asset_hint
          schema:
            default: 1x
            enum:
              - 1x
              - 2x
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - cover_item:
                          url: 'https://ak.picdn.net/assets/cms/ecedf10e57824db9516560f7523f084b445c1672-shutterstock_104947832.jpg'
                        created_time: '2018-03-06T19:19:02.000Z'
                        id: '73497710'
                        items_updated_time: '2018-01-30T09:49:22-05:00'
                        name: Flower Still Lifes
                        share_url: 'http://www.shutterstock.com/collections/73497710-flower-still-lifes.html'
                        total_item_count: 50
                        updated_time: '2018-03-06T21:28:06.000Z'
                      - cover_item:
                          url: 'https://ak.picdn.net/assets/cms/3aa67c2b92c7cead79da08b955f409269553fade-shutterstock_343681901.jpg'
                        created_time: '2018-03-06T18:54:19.000Z'
                        id: '45566855'
                        items_updated_time: '2016-05-18T10:49:02-04:00'
                        name: Feeling Down
                        share_url: 'http://www.shutterstock.com/collections/45566855-feeling-down.html'
                        total_item_count: 100
                        updated_time: '2018-03-07T13:58:21.000Z'
              schema:
                $ref: '#/components/schemas/FeaturedCollectionDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List featured image collections
      tags:
        - images
  '/v2/images/collections/featured/{id}':
    get:
      description: 'This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.'
      operationId: getFeaturedLightbox
      parameters:
        - description: Collection ID
          example: '136351027'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: 'Which sharing information to include in the response, such as a URL to the collection'
          in: query
          name: embed
          schema:
            enum:
              - share_url
            type: string
        - description: 'Cover image size, defaults to 1x'
          in: query
          name: asset_hint
          schema:
            default: 1x
            enum:
              - 1x
              - 2x
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    cover_item:
                      url: 'https://ak.picdn.net/assets/cms/3aa67c2b92c7ceadd79da08b95d5f409269553fade-shutterstock_343681901.jpg'
                    created_time: '2018-03-06T18:54:19.000Z'
                    id: '136351027'
                    items_updated_time: '2016-05-18T10:49:02-04:00'
                    name: Feeling Down
                    total_item_count: 100
                    updated_time: '2018-03-07T13:58:21.000Z'
              schema:
                $ref: '#/components/schemas/FeaturedCollection'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Featured collection not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get the details of featured image collections
      tags:
        - images
  '/v2/images/collections/featured/{id}/items':
    get:
      description: This endpoint lists the IDs of images in a featured collection and the date that each was added.
      operationId: getFeaturedLightboxItems
      parameters:
        - description: Collection ID
          example: '136351027'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 100'
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - added_time: '2016-05-18T10:49:02-04:00'
                        id: '2931777093'
                      - added_time: '2016-05-18T10:39:06-04:00'
                        id: '4101383321'
                      - added_time: '2016-05-18T10:31:04-04:00'
                        id: '1821077001'
                      - added_time: '2016-05-18T10:21:54-04:00'
                        id: '3451984902'
              schema:
                $ref: '#/components/schemas/CollectionItemDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Featured collection not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get the contents of featured image collections
      tags:
        - images
  '/v2/images/collections/{id}':
    delete:
      description: This endpoint deletes an image collection.
      operationId: deleteLightbox
      parameters:
        - description: Collection ID
          example: '136351027'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully deleted collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Delete image collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            curl -X DELETE https://api.shutterstock.com/v2/images/collections/136351027 \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "136351027"; // Collection ID

            imagesApi.deleteLightbox(collectionId)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/136351027",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
    get:
      description: 'This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.'
      operationId: getLightbox
      parameters:
        - description: Collection ID
          example: '126351027'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: 'Which sharing information to include in the response, such as a URL to the collection'
          in: query
          name: embed
          schema:
            items:
              enum:
                - share_code
                - share_url
              type: string
            type: array
        - description: Code to retrieve a shared collection
          in: query
          name: share_code
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    cover_item:
                      id: '954500'
                    id: '336351027'
                    items_updated_time: '2017-05-17T16:28:39-04:00'
                    name: My collection
                    total_item_count: 1
              schema:
                $ref: '#/components/schemas/Collection'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the details of image collections
      tags:
        - images
    post:
      description: This endpoint sets a new name for an image collection.
      operationId: renameLightbox
      parameters:
        - description: Collection ID
          example: '126351027'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  name: My new collection name
            schema:
              $ref: '#/components/schemas/CollectionUpdateRequest'
        description: The new name for the collection
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully updated collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Rename image collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "My new collection name"
            }'

            curl -X POST https://api.shutterstock.com/v2/images/collections/126351027 \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "126351027"; // Collection ID

            const body = {
              "name": "My new collection name"
            };

            imagesApi.renameLightbox(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "My new collection name"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/126351027",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/images/collections/{id}/items':
    delete:
      description: This endpoint removes one or more images from a collection.
      operationId: deleteLightboxItems
      parameters:
        - description: Collection ID
          example: '126351027'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: One or more image IDs to remove from the collection
          in: query
          name: item_id
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully removed collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Remove images from collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            curl -X DELETE https://api.shutterstock.com/v2/images/collections/186726599/items?item_id=495863218 \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "126351027"; // Collection ID

            // Array of images to remove
            const imagesToRemove = {
              "item_id": [
                "495863218"
              ]
            };

            imagesApi.deleteLightboxItems(collectionId, imagesToRemove)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/126351027/items?item_id=495863218",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
    get:
      description: This endpoint lists the IDs of images in a collection and the date that each was added.
      operationId: getLightboxItems
      parameters:
        - description: Collection ID
          example: '126351027'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Code to retrieve the contents of a shared collection
          in: query
          name: share_code
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 100'
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - added_time: '2016-11-25T16:44:25-05:00'
                        id: '38162050'
                      - added_time: '2016-11-25T16:44:22-05:00'
                        id: '38139676'
                      - added_time: '2016-11-25T16:44:19-05:00'
                        id: '787905'
                      - added_time: '2016-11-25T16:44:16-05:00'
                        id: '826197'
                      - added_time: '2016-11-25T16:44:14-05:00'
                        id: '38124508'
                      - added_time: '2016-11-25T16:44:02-05:00'
                        id: '126445388'
              schema:
                $ref: '#/components/schemas/CollectionItemDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the contents of image collections
      tags:
        - images
    post:
      description: This endpoint adds one or more images to a collection by image IDs.
      operationId: addLightboxItems
      parameters:
        - description: Collection ID
          example: '126351027'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  items:
                    - id: '49572945'
                      media_type: image
            schema:
              $ref: '#/components/schemas/CollectionItemRequest'
        description: Array of image IDs to add to the collection
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully added collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Add images to collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "items": [
                {
                  "id": "49572945",
                  "media_type": "image"
                }
              ]
            }'

            curl -X POST https://api.shutterstock.com/v2/images/collections/126351027/items \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "126351027"; // Collection ID

            const body = {
              "items": [
                {
                  "id": "495863218",
                  "media_type": "image"
                }
              ]
            };

            imagesApi.addLightboxItems(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "items" => [
                [
                  "id" => "49572945",
                  "media_type" => "image"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/126351027/items",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/images/licenses:
    get:
      description: This endpoint lists existing licenses. You can filter the results according to the type of license or the image ID.
      operationId: getImageLicenseList
      parameters:
        - description: Show licenses for the specified image ID
          in: query
          name: image_id
          schema:
            type: string
        - description: 'Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license'
          in: query
          name: license
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 200
            minimum: 0
            type: integer
        - description: Sort order
          in: query
          name: sort
          schema:
            default: newest
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - download_time: '2016-10-03T15:58:18-04:00'
                        id: i1188641320
                        image:
                          format:
                            size: huge
                          id: '114350371'
                        license: standard
                        metadata:
                          client: Company A
                          job: Important project
                          other: Important media
                          purchase_order: '457234'
                        subscription_id: s18382630
                        user:
                          username: userone
                      - download_time: '2016-10-03T16:01:12-04:00'
                        id: i1188641335
                        image:
                          format:
                            size: medium
                          id: '135658703'
                        license: standard
                        metadata:
                          client: Company A
                          job: Important project
                          other: Important media
                          purchase_order: '457234'
                        subscription_id: s18382630
                        user:
                          username: userone
                      - download_time: '2016-10-03T16:01:18-04:00'
                        id: i1188641341
                        image:
                          format:
                            size: vector
                          id: '107771801'
                        license: standard
                        metadata:
                          client: Company A
                          job: Important project
                          other: Important media
                          purchase_order: '457234'
                        subscription_id: s18382630
                        user:
                          username: userone
                    page: 1
                    per_page: 3
              schema:
                $ref: '#/components/schemas/DownloadHistoryDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List image licenses
      tags:
        - images
    post:
      description: 'This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters.'
      operationId: licenseImages
      parameters:
        - description: Subscription ID to use to license the image
          in: query
          name: subscription_id
          schema:
            type: string
        - description: 'Image format, defaults to jpg'
          in: query
          name: format
          schema:
            default: jpg
            enum:
              - eps
              - jpg
            type: string
        - description: Image size
          in: query
          name: size
          schema:
            default: huge
            enum:
              - small
              - medium
              - huge
              - vector
            type: string
        - description: Search ID that was provided in the results of an image search
          in: query
          name: search_id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  images:
                    - format: jpg
                      image_id: '59656357'
                      metadata:
                        customer_id: '12345'
                        geo_location: US
                        number_viewed: '15'
                        search_term: dog
                    - editorial_acknowledgement: true
                      format: jpg
                      image_id: '75359656'
                      metadata:
                        customer_id: '12345'
                        geo_location: US
                        number_viewed: '15'
                        search_term: dog
            schema:
              $ref: '#/components/schemas/LicenseImageRequest'
        description: List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - allotment_charge: 1
                        download:
                          url: 'https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_547233985.jpg'
                        image_id: '547233985'
              schema:
                $ref: '#/components/schemas/LicenseImageResultDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
            - purchases.view
      summary: License images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |
            DATA='{
              "images": [
                {
                  "image_id": "59656357",
                  "price": 12.50,
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            }'

            curl -X POST "https://api.shutterstock.com/v2/images/licenses?subscription_id=$SUBSCRIPTION_ID" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -H 'Content-Type: application/json' \
            -d "$DATA"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const body = {
              "images": [
                {
                  "image_id": "419235589",
                  "price": 12.50,
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            };

            const queryParams = {
              "format": "jpg",
              "size": "huge",
              "subscription_id": process.env.SUBSCRIPTION_ID
            };

            imagesApi.licenseImages(body, queryParams)
              .then(({ data }) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "images" => [
                [
                  "image_id" => "539753938",
                  "price" => 12.50,
                  "metadata" => [
                    "customer_id" => "12345"
                  ]
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/licenses?subscription_id=$SUBSCRIPTION_ID",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/images/licenses/{id}/downloads':
    post:
      description: This endpoint redownloads images that you have already received a license for.
      operationId: downloadImage
      parameters:
        - description: License ID
          example: i1188641347
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  size: huge
            schema:
              $ref: '#/components/schemas/RedownloadImage'
        description: Information about the images to redownload
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    url: 'https://download.qa.shutterstock.com/gatekeeper/LzEyMy9odWdlLmpwZyIsIm0iOjEsvdjNsbFNWbVNEQ2FhcHV1VlhhSU9VeUpVIl0/shutterstock_60447496.jpg'''
              schema:
                $ref: '#/components/schemas/Url'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: Download images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "size": "huge"
            }'

            curl -X POST https://api.shutterstock.com/v2/images/licenses/i1188641347/downloads \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const licenseId = "i1188641347"; // license ID, not image ID

            const body = {
              "size": "huge"
            };

            imagesApi.downloadImage(licenseId, body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "size" => "huge"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/licenses/i1188641347/downloads",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/images/recommendations:
    get:
      description: This endpoint returns images that customers put in the same collection as the specified image IDs.
      operationId: getImageRecommendations
      parameters:
        - description: Image IDs
          example:
            - 465011609
          in: query
          name: id
          required: true
          schema:
            items:
              type: string
            type: array
        - description: Maximum number of results returned in the response
          in: query
          name: max_items
          schema:
            default: 20
            maximum: 500
            minimum: 1
            type: integer
        - description: Restrict results to safe images
          in: query
          name: safe
          schema:
            default: true
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: '106363526'
                      - id: '113284498'
                      - id: '107390756'
                      - id: '99379946'
                      - id: '133918412'
              schema:
                $ref: '#/components/schemas/RecommendationDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List recommended images
      tags:
        - images
  /v2/images/search:
    get:
      description: 'This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.'
      operationId: searchImages
      parameters:
        - description: 'Show images added on the specified date, in the format YYYY-MM-DD'
          in: query
          name: added_date
          schema:
            format: date
            type: string
        - description: 'Show images added on or after the specified date, in the format YYYY-MM-DD'
          in: query
          name: added_date_start
          schema:
            format: date
            type: string
        - description: 'Show images added before the specified date, in the format YYYY-MM-DD'
          in: query
          name: added_date_end
          schema:
            format: date
            type: string
        - description: Show images with the specified Shutterstock-defined category; specify a category name or ID
          in: query
          name: category
          schema:
            type: string
        - description: Specify a hexadecimal color in the format '4F21EA'; the API groups it into one of 15 color categories and returns images that primarily use that color category
          in: query
          name: color
          schema:
            type: string
        - description: 'Show images with the specified contributor names or IDs, allows multiple'
          in: query
          name: contributor
          schema:
            items:
              type: string
            type: array
        - description: 'Show images from contributors in one or more specified countries by 2-letter ISO 3166-1 alpha-2 country code, such as DE or US'
          example: US
          in: query
          name: contributor_country
          schema:
            items:
              maxLength: 2
              minLength: 2
              type: string
            type: array
        - deprecated: true
          description: (Deprecated; use height_from and height_to instead) Show images with the specified height
          in: query
          name: height
          schema:
            type: integer
        - description: 'Show images with the specified height or larger, in pixels'
          in: query
          name: height_from
          schema:
            type: integer
        - description: 'Show images with the specified height or smaller, in pixels'
          in: query
          name: height_to
          schema:
            type: integer
        - description: Show images of the specified type
          in: query
          name: image_type
          schema:
            items:
              enum:
                - photo
                - illustration
                - vector
              type: string
            type: array
        - description: Set query and result language (uses Accept-Language header if not set)
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Show only images with the specified license
          in: query
          name: license
          schema:
            items:
              default: commercial
              enum:
                - commercial
                - editorial
                - enhanced
                - sensitive
                - NOT enhanced
                - NOT sensitive
              type: string
            type: array
        - description: Show image results with the specified model IDs
          in: query
          name: model
          schema:
            items:
              type: string
            type: array
        - description: Show image results with horizontal or vertical orientation
          in: query
          name: orientation
          schema:
            enum:
              - horizontal
              - vertical
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 0
            type: integer
        - description: Show images of people with a signed model release
          in: query
          name: people_model_released
          schema:
            type: boolean
        - description: Show images that feature people of the specified age category
          in: query
          name: people_age
          schema:
            enum:
              - infants
              - children
              - teenagers
              - 20s
              - 30s
              - 40s
              - 50s
              - 60s
              - older
            type: string
        - description: Show images with people of the specified ethnicity
          in: query
          name: people_ethnicity
          schema:
            enum:
              - african
              - african_american
              - black
              - brazilian
              - chinese
              - caucasian
              - east_asian
              - hispanic
              - japanese
              - middle_eastern
              - native_american
              - pacific_islander
              - south_asian
              - southeast_asian
              - other
            type: string
        - description: Show images with people of the specified gender
          in: query
          name: people_gender
          schema:
            enum:
              - male
              - female
              - both
            type: string
        - description: Show images with the specified number of people
          in: query
          name: people_number
          schema:
            maximum: 4
            minimum: 0
            type: integer
        - description: One or more search terms separated by spaces; you can use NOT to filter out images that match a term
          in: query
          name: query
          schema:
            type: string
        - description: Enable or disable safe search
          in: query
          name: safe
          schema:
            default: true
            type: boolean
        - description: Sort by
          in: query
          name: sort
          schema:
            default: popular
            enum:
              - newest
              - popular
              - relevance
              - random
            type: string
        - description: Spellcheck the search query and return results on suggested spellings
          in: query
          name: spellcheck_query
          schema:
            default: true
            type: boolean
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
        - deprecated: true
          description: (Deprecated; use width_from and width_to instead) Show images with the specified width
          in: query
          name: width
          schema:
            type: integer
        - description: 'Show images with the specified width or larger, in pixels'
          in: query
          name: width_from
          schema:
            type: integer
        - description: 'Show images with the specified width or smaller, in pixels'
          in: query
          name: width_to
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1.6667
                        assets:
                          huge_thumb:
                            height: 260
                            url: 'https://image.shutterstock.com/image-vector/minimal-geometric-background-dynamic-shapes-260nw-1120280123.jpg'
                            width: 435
                          large_thumb:
                            height: 90
                            url: 'https://thumb10.shutterstock.com/thumb_large/3673637/1120280123/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg'
                            width: 150
                          preview:
                            height: 269
                            url: 'https://image.shutterstock.com/display_pic_with_logo/3673637/1120280123/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg'
                            width: 450
                          small_thumb:
                            height: 60
                            url: 'https://thumb10.shutterstock.com/thumb_small/3673637/1120280123/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg'
                            width: 100
                        contributor:
                          id: '3673637'
                        description: Minimal geometric background. Dynamic shapes composition. Eps10 vector.
                        id: '1120280123'
                        image_type: vector
                        media_type: image
                        url: 'https://www.shutterstock.com/image-photo/1120280123'
                    page: 1
                    per_page: 1
                    search_id: p5S6QwRikdFJTHXwsoiqTg
                    total_count: 193097419
              schema:
                $ref: '#/components/schemas/ImageSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search for images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/images/search \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "query=Vienna" \
            --data-urlencode "orientation=horizontal" \
            --data-urlencode "sort=popular"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const queryParams = {
              "query": "New York",
              "sort": "popular",
              "orientation": "horizontal"
            };

            imagesApi.searchImages(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "New York",
              "sort" => "popular",
              "orientation" => "horizontal"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/images/updated:
    get:
      description: 'This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.'
      operationId: getUpdatedImages
      parameters:
        - description: 'Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways'
          in: query
          name: type
          schema:
            enum:
              - addition
              - deletion
              - edit
            items:
              type: string
            type: array
        - description: 'Show images updated on or after the specified date, in the format YYYY-MM-DD'
          in: query
          name: start_date
          schema:
            format: date
            type: string
        - description: 'Show images updated before the specified date, in the format YYYY-MM-DD'
          in: query
          name: end_date
          schema:
            format: date
            type: string
        - description: 'Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request'
          in: query
          name: interval
          schema:
            default: 1 HOUR
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 100'
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 2000
            minimum: 1
            type: integer
        - description: Sort order
          in: query
          name: sort
          schema:
            default: newest
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: '1398917399'
                        updated_time: '2019-06-04T15:56:44-04:00'
                        updates:
                          - edit
                      - id: '1398978491'
                        updated_time: '2019-06-04T15:56:44-04:00'
                        updates:
                          - edit
                      - id: '1414537214'
                        updated_time: '2019-06-04T15:56:44-04:00'
                        updates:
                          - edit
              schema:
                $ref: '#/components/schemas/UpdatedMediaDataList'
          description: OK
      security:
        - basic: []
        - customer_accessCode: []
      summary: List updated images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/images/updated \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "interval=30 MINUTE"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const queryParams = {
              "interval": "30 MINUTE"
            };

            imagesApi.getUpdatedImages(queryParams)
              .then(({ data }) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "interval" => "30 MINUTE"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/updated?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/images/{id}':
    get:
      description: 'This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.'
      operationId: getImage
      parameters:
        - description: Image ID
          example: '465011609'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: full
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    added_date: '2016-08-07'
                    aspect: 0.8501
                    assets:
                      huge_jpg:
                        display_name: Huge
                        dpi: 300
                        file_size: 6980608
                        format: jpg
                        height: 4902
                        is_licensable: true
                        width: 4167
                      huge_thumb:
                        height: 260
                        url: 'https://image.shutterstock.com/image-vector/happy-mid-autumn-festival-background-260nw-465011609.jpg'
                        width: 221
                      large_thumb:
                        height: 150
                        url: 'https://thumb7.shutterstock.com/thumb_large/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg'
                        width: 128
                      preview:
                        height: 450
                        url: 'https://image.shutterstock.com/display_pic_with_logo/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg'
                        width: 382
                      small_thumb:
                        height: 100
                        url: 'https://thumb7.shutterstock.com/thumb_small/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg'
                        width: 85
                      vector_eps:
                        display_name: Vector
                        format: eps
                        is_licensable: true
                    categories:
                      - id: '8'
                        name: Holidays
                      - id: '11'
                        name: The Arts
                    contributor:
                      id: '1384888'
                    description: Happy Mid Autumn Festival background with golden glitter Moon and hand drawn Moon Rabbits. Vector illustration
                    has_property_release: true
                    id: '465011609'
                    image_type: vector
                    is_adult: false
                    is_illustration: true
                    keywords:
                      - abstract
                      - art
                      - artistic
                      - asian
                      - autumn
                      - background
                      - bunny
                      - calligraphy
                      - celebration
                      - china
                    media_type: image
                    url: 'https://www.shutterstock.com/image-photo/465011609'
              schema:
                $ref: '#/components/schemas/Image'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about images
      tags:
        - images
  '/v2/images/{id}/similar':
    get:
      description: This endpoint returns images that are visually similar to an image that you specify.
      operationId: getSimilarImages
      parameters:
        - description: Image ID
          example: '465011609'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: 'Number of results per page, defaults to 20'
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 1
            type: integer
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1
                        assets:
                          huge_thumb:
                            height: 260
                            url: 'https://image.shutterstock.com/image-vector/happy-halloween-vector-260nw-224429596.jpg'
                            width: 260
                          large_thumb:
                            height: 150
                            url: 'https://thumb1.shutterstock.com/thumb_large/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg'
                            width: 150
                          preview:
                            height: 450
                            url: 'https://image.shutterstock.com/display_pic_with_logo/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg'
                            width: 450
                          small_thumb:
                            height: 100
                            url: 'https://thumb1.shutterstock.com/thumb_small/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg'
                            width: 100
                        contributor:
                          id: '302287'
                        description: Happy Halloween - vector
                        id: '224429596'
                        image_type: vector
                        media_type: image
                    page: 1
                    per_page: 1
                    search_id: ''
                    total_count: 200
              schema:
                $ref: '#/components/schemas/ImageSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar images
      tags:
        - images
  /v2/oauth/access_token:
    post:
      description: This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
      operationId: createAccessToken
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  client_id: 141024g14g28104gff1h
            schema:
              properties:
                client_id:
                  description: Client ID (Consumer Key) of your application
                  type: string
                client_secret:
                  description: Client Secret (Consumer Secret) of your application
                  type: string
                code:
                  description: Response code from the /oauth/authorize flow; required if grant_type=authorization_code
                  type: string
                expires:
                  default: false
                  description: 'Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token'
                  type: boolean
                grant_type:
                  description: 'Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants'
                  enum:
                    - authorization_code
                    - client_credentials
                    - refresh_token
                  type: string
                realm:
                  default: customer
                  description: User type to be authorized (usually 'customer')
                  enum:
                    - customer
                    - contributor
                  type: string
              required:
                - client_id
                - grant_type
              type: object
          application/x-www-form-urlencoded:
            examples:
              default:
                value:
                  client_id: 141024g14g28104gff1h
            schema:
              properties:
                client_id:
                  description: Client ID (Consumer Key) of your application
                  type: string
                client_secret:
                  description: Client Secret (Consumer Secret) of your application
                  type: string
                code:
                  description: Response code from the /oauth/authorize flow; required if grant_type=authorization_code
                  type: string
                expires:
                  default: 'false'
                  description: 'Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token'
                  enum:
                    - 'true'
                    - 'false'
                  type: string
                grant_type:
                  description: 'Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants'
                  enum:
                    - authorization_code
                    - client_credentials
                  type: string
                realm:
                  default: customer
                  description: User type to be authorized (usually 'customer')
                  enum:
                    - customer
                    - contributor
                  type: string
              required:
                - client_id
                - grant_type
              type: object
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    access_token: v2/NmQwOTc0NTBiMjA5YzZkY2Q4NTkvMTA4OTg1MDk5L2N1c3RvbWVyLzIvZjB2a0RseGo4Rkt6ZjRmVWJNMm10V2VzcHh1NTBlZWJ6andUQU1NeTVYYnNFTDVWOFRJakItS2RnZTlmbEY1Y3haNWdXLUtYc2JhaXo5djk0V0p2QzZUUWZ4c2FNWm41NkdLYUgyVWlCaVUtQTNVMV9YQWpzd3lpblI3SlZEem8wSG1qQ2NzSkJlX3VQTnNXenBIdkd4SXViVi1rRGJTVENCV0g1U3U0RXRJSV9rSm5lQkl5QXlvbm5JN241UUhv
                    token_type: Bearer
              schema:
                $ref: '#/components/schemas/OauthAccessTokenResponse'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Get access tokens
      tags:
        - oauth
      x-code-samples:
        - lang: shell
          source: 'curl "https://api.shutterstock.com/v2/oauth/access_token" \ -X POST \ --data-urlencode "client_id=860bde70bb335163e2e4" \ --data-urlencode "client_secret=225d245d28e5b1a37db7fd4ceb8cdf360a3ae5a7" \ --data-urlencode "grant_type=authorization_code" \ --data-urlencode "code=VaRLQ3rICmWjGr4ciI-GwR"'
        - lang: javascript--nodejs
          source: |
            const request = require("request-promise");

            const body = {
              "client_id": "860bde70bb335163e2e4",
              "client_secret": "225d245d28e5b1a37db7fd4ceb8cdf360a3ae5a7",
              "grant_type": "authorization_code",
              "code": "VaRLQ3rICmWjGr4ciI-GwR"
            };

            request.post("https://api.shutterstock.com/v2/oauth/access_token", {
              "headers": {
                "User-Agent": "request"
              },
              "body": body,
              "json": true
            })
              .then((res) => {
                console.log(res);
              });
        - lang: php
          source: |
            $body = [
              "client_id" => "860bde70bb335163e2e4",
              "client_secret" => "225d245d28e5b1a37db7fd4ceb8cdf360a3ae5a7",
              "grant_type" => "authorization_code",
              "code" => "VaRLQ3rICmWjGr4ciI-GwR"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/oauth/access_token",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Content-Type: application/json",
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/oauth/authorize:
    get:
      description: 'This endpoint returns a redirect URI (in the ''Location'' header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.'
      operationId: authorize
      parameters:
        - description: Client ID (Consumer Key) of your application
          example: 6d097450b209c6dcd859
          in: query
          name: client_id
          required: true
          schema:
            type: string
        - description: User type to be authorized (usually 'customer')
          example: customer
          in: query
          name: realm
          schema:
            default: customer
            enum:
              - customer
              - contributor
            type: string
        - description: The callback URI to send the request to after authorization; must use a host name that is registered with your application
          example: localhost
          in: query
          name: redirect_uri
          required: true
          schema:
            type: string
        - description: Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'
          example: code
          in: query
          name: response_type
          required: true
          schema:
            enum:
              - code
            type: string
        - description: Space-separated list of scopes to be authorized
          example: user.view
          in: query
          name: scope
          schema:
            default: user.view
            type: string
        - description: Unique value used by the calling app to verify the request
          example: '1540290465000'
          in: query
          name: state
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
        '302':
          content:
            text/json:
              examples:
                default:
                  description: Redirect user to authenticate with Shutterstock
                  value: 'https://accounts.shutterstock.com/login?next=%2Foauth%2Fauthorize%3Fresponse_type%3Dcode%26state%3D1539619928633%26scope%3Dlicenses.create%20licenses.view%20purchases.view%26client_id%3D6d097450b209c6dcd859%26redirect_uri%3Dhttp%3A%2F%2Flocalhost%3A3000%2Fmyapp%2Fauth%2Fcallback%26realm%3Dcustomer'
              schema:
                $ref: '#/components/schemas/AuthorizeResponse'
          description: Redirect user to authenticate with Shutterstock
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Authorize applications
      tags:
        - oauth
      x-code-samples:
        - lang: shell
          source: 'curl "https://api.shutterstock.com/v2/oauth/authorize" \ -X GET \ -G \ --data-urlencode "scope=licenses.create licenses.view purchases.view" \ --data-urlencode "state=demo_`date +%s`" \ --data-urlencode "response_type=code" \ --data-urlencode "redirect_uri=http://localhost:3000/callback" \ --data-urlencode "client_id=860bde70bb335163e2e4"'
        - lang: javascript--nodejs
          source: |
            const request = require("request-promise");

            request.get("https://api.shutterstock.com/v2/oauth/authorize", {
              "headers": {
                "User-Agent": "request"
              },
              "qs": {
                "scope": "licenses.create licenses.view purchases.view",
                "state": "demo_" + Date.now(),
                "response_type": "code",
                "redirect_uri": "http://localhost:3000/callback",
                "client_id": "860bde70bb335163e2e4"
              },
              "useQueryString": true
            })
              .then((res) => {
                console.log(res);
              });
        - lang: php
          source: |-
            $queryFields = [ "client_id" => "860bde70bb335163e2e4", "redirect_uri" => "http://localhost:3000/callback", "response_type" => "code", "scope" => "licenses.create licenses.view purchases.view", "state" => time() ];
            $options = [ CURLOPT_URL => "https://api.shutterstock.com/v2/oauth/authorize?" . http_build_query($queryFields), CURLOPT_USERAGENT => "php/curl", CURLOPT_RETURNTRANSFER => 1 ];
            $handle = curl_init(); curl_setopt_array($handle, $options); $response = curl_exec($handle); curl_close($handle);
            $decodedResponse = json_decode($response); print_r($decodedResponse);
  /v2/test:
    get:
      operationId: echo
      parameters:
        - description: Text to echo
          in: query
          name: text
          schema:
            default: ok
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    text: ok
              schema:
                $ref: '#/components/schemas/TestEcho'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Echo text
      tags:
        - test
  /v2/test/validate:
    get:
      operationId: validate
      parameters:
        - description: Integer ID
          example: 123
          in: query
          name: id
          required: true
          schema:
            type: integer
        - description: List of tags
          in: query
          name: tag
          schema:
            items:
              type: string
            type: array
        - description: User agent
          in: header
          name: user-agent
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    header:
                      user-agent: PostmanRuntime/7.1.1
                    query:
                      id: 12
              schema:
                $ref: '#/components/schemas/TestValidate'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Validate input
      tags:
        - test
  /v2/user:
    get:
      operationId: getUser
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    contributor_id: '212'
                    first_name: firstname
                    full_name: your name
                    id: '101782699'
                    language: es
                    last_name: lastname
                    username: yourusername
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - user.view
      summary: Get user details
      tags:
        - users
  /v2/user/access_token:
    get:
      operationId: getAccessToken
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    client_id: bf6e5dabd4rc1d770dc8
                    customer_id: '148363'
                    expires_in: 361354404
                    realm: customer
                    scopes:
                      - user.view
                      - user.edit
                    user_id: '120229367'
                    username: testuser
              schema:
                $ref: '#/components/schemas/AccessTokenDetails'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Get access token details
      tags:
        - users
  /v2/user/subscriptions:
    get:
      operationId: getUserSubsciptionList
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - description: 25-A-Day Subscription
                        expiration_time: '2016-11-17T16:46:36-05:00'
                        formats:
                          - description: Huge
                            format: jpg
                            media_type: image
                            min_resolution: 4000000
                            size: huge
                          - description: Med
                            format: jpg
                            media_type: image
                            min_resolution: 1000
                            size: medium
                          - description: Super
                            format: jpg
                            media_type: image
                            min_resolution: 16000000
                            size: supersize
                          - description: Small
                            format: jpg
                            media_type: image
                            min_resolution: 500
                            size: small
                          - description: Vector
                            format: eps
                            media_type: image
                            size: vector
                        id: s1729
                        license: standard
              schema:
                $ref: '#/components/schemas/SubscriptionDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - purchases.view
      summary: List user subscriptions
      tags:
        - users
  /v2/videos:
    get:
      description: 'This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.'
      operationId: getVideoList
      parameters:
        - description: One or more video IDs
          example:
            - '639703'
            - '993721'
          in: query
          name: id
          required: true
          schema:
            items:
              type: string
            type: array
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1.481
                        aspect_ratio: '3:2'
                        assets:
                          preview_jpg:
                            url: 'https://ak3.picdn.net/shutterstock/videos/639703/thumb/1.jpg'
                          preview_mp4:
                            url: 'https://ak3.picdn.net/shutterstock/videos/639703/preview/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.mp4'
                          preview_webm:
                            url: 'https://ak3.picdn.net/shutterstock/videos/639703/preview/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.webm'
                          thumb_jpg:
                            url: 'https://ak3.picdn.net/shutterstock/videos/639703/thumb/1.jpg'
                          thumb_mp4:
                            url: 'https://ak3.picdn.net/shutterstock/videos/639703/thumb/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.mp4'
                          thumb_webm:
                            url: 'https://ak3.picdn.net/shutterstock/videos/639703/thumb/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.webm'
                        contributor:
                          id: '335419'
                        description: A family of African Forest Elephants play in the mud in the jungle of the Congo River basin.
                        duration: 11
                        id: '639703'
                        media_type: video
                        url: 'https://www.shutterstock.com/video/clip-639703'
              schema:
                $ref: '#/components/schemas/VideoDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List videos
      tags:
        - videos
  /v2/videos/categories:
    get:
      description: This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
      operationId: getVideoCategories
      parameters:
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: '1'
                        name: Animals/Wildlife
                      - id: '2'
                        name: Buildings/Landmarks
                      - id: '3'
                        name: Backgrounds/Textures
                      - id: '4'
                        name: Business/Finance
                      - id: '5'
                        name: Education
              schema:
                $ref: '#/components/schemas/CategoryDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List video categories
      tags:
        - videos
  /v2/videos/collections:
    get:
      description: This endpoint lists your collections of videos and their basic attributes.
      operationId: getClipboxList
      parameters:
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - created_time: '2017-07-05T08:51:00-04:00'
                        id: '17553374'
                        name: kittens and puppies
                        total_item_count: 0
                        updated_time: '2017-07-05T08:51:00-04:00'
                      - created_time: '2017-07-05T08:51:00-04:00'
                        id: '17553375'
                        name: wild life
                        total_item_count: 0
                        updated_time: '2017-07-05T08:51:00-04:00'
                      - created_time: '2017-07-06T08:50:57-04:00'
                        id: '17555175'
                        name: young couples
                        total_item_count: 2
                        updated_time: '2017-07-06T08:50:57-04:00'
                      - created_time: '2017-07-06T08:50:58-04:00'
                        id: '17555176'
                        name: sky timelapses
                        total_item_count: 2
                        updated_time: '2017-07-06T08:50:58-04:00'
              schema:
                $ref: '#/components/schemas/CollectionDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: List video collections
      tags:
        - videos
    post:
      description: 'This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.'
      operationId: createClipbox
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  name: New collection name
            schema:
              $ref: '#/components/schemas/CollectionCreateRequest'
        description: Collection metadata
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionCreateResponse'
          description: No response was specified
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    id: '10120264'
              schema:
                $ref: '#/components/schemas/CollectionCreateResponse'
          description: Successfully created collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Create video collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "New collection name"
            }'

            curl -X POST https://api.shutterstock.com/v2/videos/collections \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const body = {
              "name": "New collection name"
            };

            videosApi.createClipbox(body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "New collection name"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/videos/collections/{id}':
    delete:
      description: This endpoint deletes a collection.
      operationId: deleteClipbox
      parameters:
        - description: The ID of the collection to delete
          example: '17555176'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully deleted collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Delete video collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            curl -X DELETE https://api.shutterstock.com/v2/videos/collections/17555176 \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "17555176";

            videosApi.deleteClipbox(collectionId)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
    get:
      description: 'This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.'
      operationId: getClipbox
      parameters:
        - description: The ID of the collection to return
          example: '17555176'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    id: '17555176'
                    name: cats and dogs
                    total_item_count: '0'
                    updated_time: '2017-07-05T08:51:00-04:00'
              schema:
                $ref: '#/components/schemas/Collection'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the details of video collections
      tags:
        - videos
    post:
      description: This endpoint sets a new name for a collection.
      operationId: renameClipbox
      parameters:
        - description: The ID of the collection to rename
          example: '17555176'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  name: Updated collection name
            schema:
              $ref: '#/components/schemas/CollectionUpdateRequest'
        description: The new name for the collection
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully updated collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Rename video collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "Updated collection name"
            }'

            curl -X POST https://api.shutterstock.com/v2/videos/collections/17555176 \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "186765119";

            const body = {
              "name": "My new collection name"
            };

            videosApi.renameClipbox(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "Updated collection name"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/videos/collections/{id}/items':
    delete:
      description: This endpoint removes one or more videos from a collection.
      operationId: deleteClipboxItems
      parameters:
        - description: The ID of the Collection from which items will be deleted
          example: '17555176'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: One or more video IDs to remove from the collection
          in: query
          name: item_id
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully removed collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Remove videos from collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            curl -X DELETE https://api.shutterstock.com/v2/videos/collections/17555176/items \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "17555176";

            // Array of videos to remove
            const videosToRemove = {
              "item_id": [
                "10120264"
              ]
            };

            videosApi.deleteClipboxItems(collectionId, videosToRemove)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176/items",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
    get:
      description: This endpoint lists the IDs of videos in a collection and the date that each was added.
      operationId: getClipboxItems
      parameters:
        - description: The ID of the Collection whose items are to be returned
          example: '17555176'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 150
            minimum: 1
            type: integer
        - description: Sort order
          in: query
          name: sort
          schema:
            default: oldest
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - added_time: '2017-07-06T14:33:42-04:00'
                        id: '123123'
                        media_type: video
                      - added_time: '2017-07-06T14:33:42-04:00'
                        id: '654654'
                        media_type: video
                    page: 1
                    per_page: 100
              schema:
                $ref: '#/components/schemas/CollectionItemDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the contents of video collections
      tags:
        - videos
    post:
      description: This endpoint adds one or more videos to a collection by video IDs.
      operationId: addClipboxItems
      parameters:
        - description: The ID of the collection to which items should be added
          example: '17555176'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  items:
                    - id: '10120264'
                    - id: '24419024'
            schema:
              $ref: '#/components/schemas/CollectionItemRequest'
        description: Array of video IDs to add to the collection
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Successfully added collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Add videos to collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "items": [
                {
                  "id": "10120264"
                },
                {
                  "id": "24419024"
                }
              ]
            }'

            curl -X POST https://api.shutterstock.com/v2/videos/collections/17555176/items \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "17555176"; // Collection ID

            // Array of videos to add
            const body = {
              "items": [
                {
                  "id": "10120264",
                  "media_type": "video"
                }
              ]
            };

            videosApi.addLightboxItems(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "items" => [
                [
                  "id" => "10120264"
                ],
                [
                  "id" => "24419024"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176/items",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/videos/licenses:
    get:
      description: This endpoint lists existing licenses. You can filter the results according to the type of license or the video ID.
      operationId: getVideoLicenseList
      parameters:
        - description: Show licenses for the specified video ID
          in: query
          name: video_id
          schema:
            type: string
        - description: 'Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license'
          in: query
          name: license
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 200
            minimum: 1
            type: integer
        - description: Sort by oldest or newest videos first
          in: query
          name: sort
          schema:
            default: newest
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - download_time: '2018-05-24T14:26:25-04:00'
                        id: v3286346
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-23T10:10:24-04:00'
                        id: v3285467
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-22T07:51:17-04:00'
                        id: v3283718
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-21T12:01:07-04:00'
                        id: v3283019
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-21T11:59:43-04:00'
                        id: v3283016
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-15T10:53:10-04:00'
                        id: v3278213
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-14T23:31:59-04:00'
                        id: v3277514
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-14T12:52:40-04:00'
                        id: v3275900
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-10T15:38:20-04:00'
                        id: v3273884
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                      - download_time: '2018-05-10T15:24:28-04:00'
                        id: v3273878
                        license: footage_premier
                        metadata:
                          customer_id: '12345'
                          geo_location: US
                          number_viewed: '15'
                          search_term: dog
                        subscription_id: s8907043
                        user:
                          username: myusername
                        video:
                          format:
                            size: sd
                          id: '2140697'
                    page: 1
                    per_page: 20
              schema:
                $ref: '#/components/schemas/DownloadHistoryDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List video licenses
      tags:
        - videos
    post:
      description: This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters.
      operationId: licenseVideos
      parameters:
        - description: The subscription ID to use for licensing
          in: query
          name: subscription_id
          schema:
            type: string
        - description: The size of the video to license
          in: query
          name: size
          schema:
            default: web
            enum:
              - web
              - sd
              - hd
              - 4k
            type: string
        - description: The Search ID that led to this licensing event
          in: query
          name: search_id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  videos:
                    - size: hd
                      subscription_id: s8906043
                      video_id: '2140697'
                    - size: 4k
                      subscription_id: s8241443
                      video_id: '5613314'
            schema:
              $ref: '#/components/schemas/LicenseVideoRequest'
        description: List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - allotment_charge: 1
                        download:
                          url: 'https://download.shutterstock.com/gatekeeper/W3siZSI6MTQ5NzAyNjU1MiwiayI6InZpZGVvLzIxNDA2OTcvc2QubW92IiwibSI6IjEiLCJkIjoic2h1dHRlcnN0b2NrLW1lZGlhIn0sInVsOFY1dElzb3lWZHNxb3JyWlJjS1dyb016TSJd/shutterstock_v2140697.mov'
                        video_id: '2140697'
              schema:
                $ref: '#/components/schemas/LicenseVideoResultDataList'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
            - purchases.view
      summary: License videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |
            DATA='{
              "videos": [
                {
                  "video_id": "2140697",
                  "size": "hd"
                },
                {
                  "video_id": "5613314",
                  "size": "4k"
                }
              ]
            }'

            curl -X POST 'https://api.shutterstock.com/v2/videos/licenses?subscription_id='$SUBSCRIPTION_ID \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const body = {
              "videos": [
                {
                  "video_id": "419235589"
                },
                {
                  "video_id": "1079756147"
                }
              ]
            };

            const queryParams = {
              "subscription_id": SHUTTERSTOCK_SUBSCRIPTION_ID,
              "size": "web"
            };

            videosApi.searchVideos(body, queryParams)
              .then(({ data }) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "videos" => [
                [
                  "video_id" => "2140697",
                  "size" => "hd"
                ],
                [
                  "video_id" => "5613314",
                  "size" => "4k"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/licenses?subscription_id=$SUBSCRIPTION_ID",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/videos/licenses/{id}/downloads':
    post:
      description: This endpoint redownloads videos that you have already received a license for.
      operationId: downloadVideos
      parameters:
        - description: The license ID of the item to (re)download
          example: i1188641347
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              default:
                value: {}
            schema:
              $ref: '#/components/schemas/RedownloadVideo'
        description: Information about the videos to redownload
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    url: 'https://download1.shutterstock.com/gatekeeper/W3siZSI6MTUzMzMzMzUzMCwiayI6InZpZGVvLzM5NjU4ODEvaGQubW92IiwibSI6MSwiZCI6InNodXR0ZXJzdG9jay1tZWRpYSJ9LCJjZ2lvRU14T09hNWZGTHZsN21iTWVPRVQ3MFEiXQ/shutterstock_v3965881.mov'
              schema:
                $ref: '#/components/schemas/Url'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: Download videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{}'

            curl -X POST https://api.shutterstock.com/v2/videos/licenses/i1188641347/downloads \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const licenseId = "i1188641347";

            const body = {};

            videosApi.downloadVideos(licenseId, body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/licenses/i1188641347/downloads",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/videos/search:
    get:
      description: 'This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.'
      operationId: searchVideos
      parameters:
        - description: 'Show videos added on the specified date, in the format YYYY-MM-DD'
          in: query
          name: added_date
          schema:
            format: date
            type: string
        - description: 'Show videos added on or after the specified date, in the format YYYY-MM-DD'
          in: query
          name: added_date_start
          schema:
            format: date
            type: string
        - description: 'Show videos added before the specified date, in the format YYYY-MM-DD'
          in: query
          name: added_date_end
          schema:
            format: date
            type: string
        - description: Show videos with the specified aspect ratio
          in: query
          name: aspect_ratio
          schema:
            enum:
              - '4_3'
              - '16_9'
              - nonstandard
            type: string
        - description: Show videos with the specified Shutterstock-defined category; specify a category name or ID
          in: query
          name: category
          schema:
            type: string
        - description: Show videos with the specified artist names or IDs
          in: query
          name: contributor
          schema:
            items:
              type: string
            type: array
        - description: 'Show videos from contributors in one or more specified countries by 2-letter ISO 3166-1 alpha-2 country code, such as DE or US'
          example: US
          in: query
          name: contributor_country
          schema:
            items:
              maxLength: 2
              minLength: 2
              type: string
            type: array
        - deprecated: true
          description: (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration (seconds)
          in: query
          name: duration
          schema:
            type: integer
        - description: Show videos with the specified duration or longer (seconds)
          in: query
          name: duration_from
          schema:
            type: integer
        - description: Show videos with the specified duration or shorter (seconds)
          in: query
          name: duration_to
          schema:
            type: integer
        - deprecated: true
          description: (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
          in: query
          name: fps
          schema:
            type: number
        - description: Show videos with the specified frames per second or more
          in: query
          name: fps_from
          schema:
            type: number
        - description: Show videos with the specified frames per second or fewer
          in: query
          name: fps_to
          schema:
            type: number
        - description: Set query and result language (uses Accept-Language header if not set)
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Show only videos with the specified license or licenses
          example:
            - commercial
            - editorial
          explode: true
          in: query
          name: license
          schema:
            items:
              default: commercial
              enum:
                - commercial
                - editorial
              type: string
            type: array
        - description: Show videos with each of the specified models
          example:
            - '442583'
            - '434750'
          explode: true
          in: query
          name: model
          schema:
            items:
              type: string
            type: array
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 0
            type: integer
        - description: Show videos that feature people of the specified age range
          in: query
          name: people_age
          schema:
            enum:
              - infants
              - children
              - teenagers
              - 20s
              - 30s
              - 40s
              - 50s
              - 60s
              - older
            type: string
        - description: Show videos with people of the specified ethnicity
          in: query
          name: people_ethnicity
          schema:
            enum:
              - african
              - african_american
              - black
              - brazilian
              - chinese
              - caucasian
              - east_asian
              - hispanic
              - japanese
              - middle_eastern
              - native_american
              - pacific_islander
              - south_asian
              - southeast_asian
              - other
            type: string
        - description: Show videos with people with the specified gender
          in: query
          name: people_gender
          schema:
            enum:
              - male
              - female
              - both
            type: string
        - description: Show videos with the specified number of people
          in: query
          name: people_number
          schema:
            maximum: 4
            minimum: 0
            type: integer
        - description: Show only videos of people with a signed model release
          in: query
          name: people_model_released
          schema:
            type: boolean
        - description: One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
          in: query
          name: query
          schema:
            type: string
        - description: Show videos with the specified resolution
          in: query
          name: resolution
          schema:
            enum:
              - 4k
              - standard_definition
              - high_definition
            type: string
        - description: Enable or disable safe search
          in: query
          name: safe
          schema:
            default: true
            type: boolean
        - description: Sort by one of these categories
          in: query
          name: sort
          schema:
            default: popular
            enum:
              - newest
              - popular
              - relevance
              - random
            type: string
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1.778
                        aspect_ratio: '16:9'
                        assets:
                          preview_jpg:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg'
                          preview_mp4:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4'
                          preview_webm:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm'
                          thumb_jpg:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg'
                          thumb_mp4:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4'
                          thumb_webm:
                            url: 'https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm'
                        contributor:
                          id: '178456'
                        description: 'The Concept of: Digitalization of Information Flow Moving Through Rack Servers in Data Center. Shot on RED EPIC-W 8K Helium Cinema Camera.'
                        duration: 19
                        id: '33248488'
                        media_type: video
                        url: 'https://www.shutterstock.com/video/clip-33248488'
                    page: 1
                    per_page: 1
                    search_id: 4LseqIiX-nIW7_vx8-jhWQ
                    total_count: 9488747
              schema:
                $ref: '#/components/schemas/VideoSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search for videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET "https://api.shutterstock.com/v2/videos/search" \
            --header "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "query=hot air balloon" \
            --data-urlencode "duration_from=30" \
            --data-urlencode "sort=popular"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const queryParams = {
              "query": "hot air balloon",
              "duration_from": 30,
              "sort": "popular"
            };

            videosApi.searchVideos(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "hot air balloon",
              "duration_from" => 30,
              "sort" => "popular"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  /v2/videos/updated:
    get:
      description: 'This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.'
      operationId: getUpdatedVideos
      parameters:
        - description: 'Show videos updated on or after the specified date, in the format YYYY-MM-DD'
          in: query
          name: start_date
          schema:
            format: date
            type: string
        - description: 'Show videos updated before the specified date, in the format YYYY-MM-DD'
          in: query
          name: end_date
          schema:
            format: date
            type: string
        - description: 'Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request'
          in: query
          name: interval
          schema:
            default: 1 HOUR
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 100
            maximum: 2000
            minimum: 1
            type: integer
        - description: Sort by oldest or newest videos first
          in: query
          name: sort
          schema:
            default: newest
            enum:
              - newest
              - oldest
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: '1030611710'
                        updated_time: '2019-06-04T15:57:31-04:00'
                        updates:
                          - addition
                          - edit
                      - id: '1030611713'
                        updated_time: '2019-06-04T15:57:31-04:00'
                        updates:
                          - addition
                          - edit
                      - id: '1030611719'
                        updated_time: '2019-06-04T15:57:31-04:00'
                        updates:
                          - addition
                          - edit
              schema:
                $ref: '#/components/schemas/UpdatedMediaDataList'
          description: OK
      security:
        - basic: []
        - customer_accessCode: []
      summary: List updated videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/videos/updated \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "interval=30 MINUTE"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const queryParams = {
              "interval": "30 MINUTE"
            };

            videosApi.getUpdatedVideos(queryParams)
              .then(({ data }) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "interval" => "30 MINUTE"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/updated?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
  '/v2/videos/{id}':
    get:
      description: 'This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.'
      operationId: getVideo
      parameters:
        - description: Video ID
          example: '30867073'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: full
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    added_date: '2017-09-18'
                    aspect: 1.896
                    aspect_ratio: '1.90:1'
                    assets:
                      4k:
                        display_name: Original UltraHD 4K
                        file_size: 1859655680
                        format: apch
                        fps: 25
                        height: 2160
                        is_licensable: true
                        width: 4096
                      hd:
                        display_name: HD MPEG
                        file_size: 92101632
                        format: mov
                        fps: 25
                        height: 1080
                        is_licensable: true
                        width: 2046
                      preview_jpg:
                        url: 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/1.jpg'
                      preview_mp4:
                        url: 'https://ak3.picdn.net/shutterstock/videos/30867073/preview/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.mp4'
                      preview_webm:
                        url: 'https://ak3.picdn.net/shutterstock/videos/30867073/preview/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.webm'
                      sd:
                        display_name: Standard Definition MPEG
                        file_size: 18221056
                        format: mov
                        fps: 25
                        height: 480
                        is_licensable: true
                        width: 910
                      thumb_jpg:
                        url: 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/1.jpg'
                      thumb_jpgs:
                        urls:
                          - 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/1.jpg'
                          - 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/2.jpg'
                          - 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/3.jpg'
                          - 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/12.jpg'
                      thumb_mp4:
                        url: 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.mp4'
                      thumb_webm:
                        url: 'https://ak3.picdn.net/shutterstock/videos/30867073/thumb/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.webm'
                      web:
                        display_name: Low Resolution MPEG
                        file_size: 6441984
                        format: mov
                        fps: 25
                        height: 240
                        is_licensable: true
                        width: 454
                    categories:
                      - id: '13'
                        name: People
                      - id: '18'
                        name: Sports/Recreation
                    contributor:
                      id: '907171'
                    description: Fans cheering for sports team on the bleachers of a professional stadium
                    duration: 19
                    has_model_release: true
                    has_property_release: true
                    id: '30867073'
                    is_adult: false
                    keywords:
                      - 4k resolution
                      - adult
                      - adults only
                      - american football - sport
                      - applauding
                      - arms raised
                    media_type: video
                    models:
                      - id: '22793203'
                    url: 'https://www.shutterstock.com/video/clip-30867073'
              schema:
                $ref: '#/components/schemas/Video'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about videos
      tags:
        - videos
  '/v2/videos/{id}/similar':
    get:
      description: This endpoint searches for videos that are similar to a video that you specify.
      operationId: getSimilarVideos
      parameters:
        - description: The ID of a video for which similar videos should be returned
          example: '2140697'
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Language for the keywords and categories in the response
          example: es
          in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of results per page
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            minimum: 1
            type: integer
        - description: Amount of detail to render in the response
          in: query
          name: view
          schema:
            default: minimal
            enum:
              - minimal
              - full
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - aspect: 1.778
                        aspect_ratio: '16:9'
                        assets:
                          preview_jpg:
                            url: 'https://ak8.picdn.net/shutterstock/videos/6658088/thumb/1.jpg'
                          preview_mp4:
                            url: 'https://ak8.picdn.net/shutterstock/videos/6658088/preview/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.mp4'
                          preview_webm:
                            url: 'https://ak8.picdn.net/shutterstock/videos/6658088/preview/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.webm'
                          thumb_jpg:
                            url: 'https://ak8.picdn.net/shutterstock/videos/6658088/thumb/1.jpg'
                          thumb_mp4:
                            url: 'https://ak8.picdn.net/shutterstock/videos/6658088/thumb/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.mp4'
                          thumb_webm:
                            url: 'https://ak8.picdn.net/shutterstock/videos/6658088/thumb/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.webm'
                        contributor:
                          id: '87721'
                        description: Caucasian parents wearing casual clothes standing watching ocean waves summer daughters carrying bodyboards surfboards slow motion
                        duration: 23
                        id: '6658088'
                        media_type: video
                    page: 1
                    per_page: 1
                    search_id: ''
                    total_count: 200
              schema:
                $ref: '#/components/schemas/VideoSearchResults'
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar videos
      tags:
        - videos
components:
  schemas:
    AccessTokenDetails:
      description: Access token details that are currently associated with this user
      properties:
        client_id:
          description: Client ID that is associated with the user
          type: string
        contributor_id:
          description: Contributor ID that is associated with the user
          type: string
        customer_id:
          description: Customer ID that is associated with the user
          type: string
        expires_in:
          description: Number of seconds until the access token expires; no expiration if this value is null
          type: integer
        organization_id:
          description: Organization ID that is associated with the user
          type: string
        realm:
          description: Type of access token
          enum:
            - customer
            - contributor
          type: string
        scopes:
          description: Scopes that this access token provides when used as authentication
          items:
            type: string
          type: array
        user_id:
          description: User ID that is associated with the user
          type: string
        username:
          description: User name that is associated with the user
          type: string
      type: object
    Album:
      additionalProperties: false
      description: Album metadata
      properties:
        id:
          description: The album ID
          type: string
        title:
          description: The album title
          type: string
      required:
        - id
        - title
      type: object
    Allotment:
      description: Allotment
      properties:
        downloads_left:
          description: Number of licenses remaining in the subscription
          type: integer
        downloads_limit:
          description: Total number of licenses available to this subscription
          type: integer
        end_time:
          description: 'Date the subscription ends, in the format YYYY-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        start_time:
          description: 'Date the subscription started, in the format YYYY-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
      type: object
    Artist:
      description: Artist metadata
      properties:
        name:
          description: The artist's name
          type: string
      required:
        - name
      type: object
    Audio:
      additionalProperties: false
      description: Audio metadata
      example:
        added_date: '2016-08-16'
        album:
          id: ''
          title: ''
        artists:
          - name: Klimenko Music
        assets:
          clean_audio:
            file_size: 35188408
          preview_mp3:
            file_size: 4400203
            url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3'
          preview_ogg:
            file_size: 4453197
            url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg'
          waveform:
            file_size: 18778
            url: 'https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png'
        bpm: 110
        contributor:
          id: '2847971'
        description: 'Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.'
        duration: 183
        genres:
          - Dance/Electronic
          - Electro Pop
          - Pop/Rock
        id: '442583'
        instruments:
          - Piano
          - Synth bass
          - Synth drums
          - Synthesizer
        is_adult: false
        is_instrumental: true
        isrc: ''
        keywords:
          - celebratory
          - chic
          - euphoric
          - good times
          - hip
          - optimistic
          - party
          - soaring
          - upbeat
        language: en
        lyrics: ''
        media_type: audio
        moods:
          - Bright
          - Confident
          - Fun
          - Happy
          - Inspiring
          - Optimistic
          - Playful
          - Sophisticated
          - Stylish
          - Uplifting
        published_time: '2016-08-16T14:30:03-04:00'
        recording_version: ''
        releases: []
        similar_artists: []
        title: Another Tomorrow
        updated_time: '2016-08-18T17:59:33-04:00'
        url: 'https://www.shutterstock.com/music/track/another-tomorrow/442583'
        vocal_description: ''
      properties:
        added_date:
          description: 'Date this track was added to the Shutterstock library, in the format: YYYY-MM-DD'
          format: date
          type: string
        affiliate_url:
          description: Affiliate referral link; appears only for registered affiliate partners
          type: string
        album:
          $ref: '#/components/schemas/Album'
        artists:
          description: List of artists
          items:
            $ref: '#/components/schemas/Artist'
          type: array
        assets:
          $ref: '#/components/schemas/AudioAssets'
        bpm:
          description: BPM (beats per minute) of this track
          type: integer
        contributor:
          $ref: '#/components/schemas/Contributor'
        deleted_time:
          format: date-time
          type: string
        description:
          description: Description of this track
          type: string
        duration:
          description: Duration of this track in seconds
          type: integer
        genres:
          description: List of all genres for this track
          items:
            description: Genre that is associated with this track
            type: string
          type: array
        id:
          description: Shutterstock ID of this track
          type: string
        instruments:
          description: List of all instruments that appear in this track
          items:
            description: Instrument that appears in this track
            type: string
          type: array
        is_adult:
          description: Whether or not this track contains adult content
          type: boolean
        is_instrumental:
          description: Whether or not this track is purely instrumental (lacking lyrics)
          type: boolean
        isrc:
          description: ''
          type: string
        keywords:
          description: List of all keywords for this track
          items:
            description: Keyword for this track
            type: string
          type: array
        language:
          description: Language of this track's lyrics
          type: string
        lyrics:
          description: Lyrics of this track
          type: string
        media_type:
          description: Media type of this track; should always be "audio"
          type: string
        model_releases:
          description: List of all model releases for this track
          items:
            $ref: '#/components/schemas/ModelRelease'
          type: array
        moods:
          description: List of all moods of this track
          items:
            description: Mood of this track
            type: string
          type: array
        published_time:
          description: 'Time this track was published, in the format YYYY-MM-DDThh:mm:ssZ'
          format: date-time
          type: string
        recording_version:
          description: Recording version of this track
          type: string
        releases:
          description: List of all releases of this track
          items:
            description: Release of this track
            type: string
          type: array
        similar_artists:
          description: List of all similar artists of this track
          items:
            $ref: '#/components/schemas/Artist'
          type: array
        submitted_time:
          description: 'Time this track was submitted, in the format YYYY-MM-DDThh:mm:ssZ'
          format: date-time
          type: string
        title:
          description: Title of this track
          type: string
        updated_time:
          description: 'Time this track was last updated, in the format YYYY-MM-DDThh:mm:ssZ'
          format: date-time
          type: string
        url:
          description: Link to track information page; included only for certain accounts
          type: string
        vocal_description:
          description: Vocal description of this track
          type: string
      required:
        - id
        - media_type
        - contributor
      type: object
    AudioAssetDetails:
      description: Audio asset metadata
      properties:
        file_size:
          description: File size of the track
          type: integer
        url:
          description: URL the track is available at
          type: string
      type: object
    AudioAssets:
      description: Audio assets
      properties:
        album_art:
          $ref: '#/components/schemas/AudioAssetDetails'
        clean_audio:
          $ref: '#/components/schemas/AudioAssetDetails'
        original_audio:
          $ref: '#/components/schemas/AudioAssetDetails'
        preview_mp3:
          $ref: '#/components/schemas/AudioAssetDetails'
        preview_ogg:
          $ref: '#/components/schemas/AudioAssetDetails'
        waveform:
          $ref: '#/components/schemas/AudioAssetDetails'
      type: object
    AudioDataList:
      description: List of tracks
      example:
        data:
          - added_date: '2016-04-12'
            album:
              id: ''
              title: ''
            artists:
              - name: Fin Productions
            assets:
              clean_audio:
                file_size: 30760372
              preview_mp3:
                file_size: 3846606
                url: 'https://ak.picdn.net/shutterstock/audio/434750/preview/preview.mp3'
              preview_ogg:
                file_size: 4402608
                url: 'https://ak.picdn.net/shutterstock/audio/434750/preview/preview.ogg'
              waveform:
                file_size: 19822
                url: 'https://ak.picdn.net/shutterstock/audio/434750/waveform/waveform.png'
            bpm: 100
            contributor:
              id: '2847971'
            description: 'Pulsing and feel-good, featuring slick electric guitar, synthesizer, bass, electronic drum pads and drums that create a positive, celebratory mood.'
            duration: 160
            genres:
              - Dance/Electronic
              - Electro Pop
              - Pop/Rock
            id: '434750'
            instruments:
              - Bass
              - Drums
              - Electric guitar
              - Pads
              - Percussion
              - Synthesizer
            is_adult: false
            is_instrumental: true
            isrc: ''
            keywords:
              - breezy
              - celebration
              - festive
              - good times
              - hopeful
              - optimistic
              - party
              - positive
              - reflective
            language: en
            lyrics: ''
            media_type: audio
            moods:
              - Bright
              - Confident
              - Fun
              - Happy
              - Inspiring
              - Optimistic
              - Playful
              - Sophisticated
              - Stylish
              - Uplifting
            published_time: '2016-04-12T17:45:29-04:00'
            recording_version: ''
            releases: []
            similar_artists: []
            title: Fresh Love
            updated_time: '2016-08-18T18:03:11-04:00'
            vocal_description: ''
      properties:
        data:
          description: Tracks
          items:
            $ref: '#/components/schemas/Audio'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    AudioSearchResults:
      additionalProperties: false
      description: Audio search results
      properties:
        data:
          description: List of tracks
          items:
            $ref: '#/components/schemas/Audio'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        search_id:
          description: ID of the search
          type: string
        total_count:
          description: Total count of all results across all pages
          type: integer
      required:
        - data
        - total_count
        - search_id
      type: object
    AuthorizeResponse:
      description: Response to Authorize requests
      properties:
        body:
          description: HTML redirect URL that contains the application authorization 'code'
          type: string
      required:
        - body
      type: object
    Category:
      description: Category information
      properties:
        id:
          description: Category ID
          type: string
        name:
          description: Category name
          type: string
      type: object
    CategoryDataList:
      description: List of categories
      properties:
        data:
          description: Categories
          items:
            $ref: '#/components/schemas/Category'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: The current page of results
          type: integer
        per_page:
          description: The number of results per page
          type: integer
        total_count:
          description: The total number of results across all pages
          type: integer
    Collection:
      description: Collection metadata
      properties:
        cover_item:
          $ref: '#/components/schemas/CollectionItem'
        created_time:
          description: When the collection was created
          format: date-time
          type: string
        id:
          description: The collection ID
          type: string
        items_updated_time:
          description: The last time this collection's items were updated
          format: date-time
          type: string
        name:
          description: The name of the collection
          type: string
        share_code:
          description: A code that can be used to share the collection (optional)
          type: string
        share_url:
          description: The browser URL that can be used to share the collection (optional)
          type: string
        total_item_count:
          description: The number of items in the collection
          type: integer
        updated_time:
          description: The last time the collection was update (other than changes to the items in it)
          format: date-time
          type: string
      required:
        - id
        - name
        - total_item_count
      type: object
    CollectionCreateRequest:
      description: Collection creation request
      example:
        name: Test Collection 19cf
      properties:
        name:
          description: The name of the collection
          type: string
      required:
        - name
      type: object
    CollectionCreateResponse:
      description: Create collection response
      example:
        id: '48433105'
      properties:
        id:
          description: ID of the new collection
          type: string
      required:
        - id
      type: object
    CollectionDataList:
      description: List of collections
      example:
        data:
          - created_time: '2014-11-05T19:29:56-05:00'
            id: '5747953'
            name: Test Collection cdad
            total_item_count: 0
            updated_time: '2014-11-05T19:29:56-05:00'
          - created_time: '2014-11-05T19:29:56-05:00'
            id: '5747955'
            name: Test Collection ff5f
            total_item_count: 0
            updated_time: '2014-11-05T19:29:56-05:00'
          - created_time: '2014-11-05T19:29:58-05:00'
            id: '5747957'
            name: Updated Collection ebc4
            total_item_count: 0
            updated_time: '2014-11-05T19:29:58-05:00'
          - created_time: '2014-11-05T19:32:13-05:00'
            id: '5747971'
            name: Test Collection 0072
            total_item_count: 0
            updated_time: '2014-11-05T19:32:13-05:00'
          - created_time: '2014-11-05T19:32:13-05:00'
            id: '5747973'
            name: Test Collection d332
            total_item_count: 0
            updated_time: '2014-11-05T19:32:13-05:00'
      properties:
        data:
          description: Collections
          items:
            $ref: '#/components/schemas/Collection'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: The current page of results
          type: integer
        per_page:
          description: The number of results per page
          type: integer
        total_count:
          description: The total number of results across all pages
          type: integer
    CollectionItem:
      description: Collection item metadata
      properties:
        added_time:
          description: The date the item was added to the collection
          format: date-time
          type: string
        id:
          description: ID of the item
          type: string
        media_type:
          description: 'The media type of the item, such as image, video, or audio'
          type: string
      required:
        - id
      type: object
    CollectionItemDataList:
      description: List of collections
      example:
        data:
          - added_time: '2016-08-18T18:52:59-04:00'
            id: '76688182'
            media_type: audio
          - added_time: '2016-08-18T18:52:59-04:00'
            id: '40005859'
            media_type: audio
        page: 1
        per_page: 100
      properties:
        data:
          description: Collections
          items:
            $ref: '#/components/schemas/CollectionItem'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: The current page of results
          type: integer
        per_page:
          description: The number of results per page
          type: integer
        total_count:
          description: The total number of results across all pages
          type: integer
    CollectionItemRequest:
      description: Request to get the list of collection items
      properties:
        items:
          description: List of items
          items:
            $ref: '#/components/schemas/CollectionItem'
          type: array
      required:
        - items
      type: object
    CollectionUpdateRequest:
      description: Collection update request
      example:
        name: My collection with a new name
      properties:
        name:
          description: The new name of the collection
          type: string
      required:
        - name
      type: object
    Contributor:
      description: Contributor
      properties:
        id:
          description: ID of the contributor
          type: string
      required:
        - id
      type: object
    ContributorProfile:
      description: Contributor profile
      properties:
        about:
          description: Short description of the contributors' library
          type: string
        contributor_type:
          description: 'Type of content that the contributor specializes in (photographer, illustrator, etc)'
          items:
            type: string
          type: array
        display_name:
          description: Preferred name to be displayed for the contributor
          type: string
        equipment:
          description: 'List of equipment used by the contributor (Canon EOS 5D Mark II, etc)'
          items:
            type: string
          type: array
        id:
          description: Contributor ID
          type: string
        location:
          description: '2-letter ISO 3166-1 alpha-2 country code representing the contributors'' locale, such as DE or US'
          type: string
        portfolio_url:
          description: Web URL for the contributors' profile
          type: string
        social_media:
          $ref: '#/components/schemas/ContributorProfileSocialMedia'
        styles:
          description: 'List of styles that the contributor specializes in (lifestyle, mixed media, etc)'
          items:
            type: string
          type: array
        subjects:
          description: 'Generic list of subjects for contributors'' work (food_and_drink, holiday, people, etc)'
          items:
            type: string
          type: array
        website:
          description: Personal website for the contributor
          type: string
      required:
        - id
      type: object
    ContributorProfileDataList:
      description: List of contributor profiles
      properties:
        data:
          description: Conributor profiles
          items:
            $ref: '#/components/schemas/ContributorProfile'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: Error message
          type: string
        page:
          description: Page of response
          type: integer
        per_page:
          description: Number of contributors per page
          type: integer
        total_count:
          description: Total count of contributors for this request
          type: integer
    ContributorProfileSocialMedia:
      description: Contributor profile on social media
      properties:
        facebook:
          description: Facebook link for contributor
          type: string
        google_plus:
          description: Google+ link for contributor
          type: string
        linkedin:
          description: LinkedIn link for contributor
          type: string
        pinterest:
          description: Pinterest page for contributor
          type: string
        tumblr:
          description: Tumblr link for contributor
          type: string
        twitter:
          description: Twitter link for contributor
          type: string
      type: object
    Cookie:
      description: Cookie object
      properties:
        name:
          description: The name of the cookie
          type: string
        value:
          description: The value of the cookie
          type: string
      required:
        - name
        - value
      type: object
    DownloadHistory:
      description: 'Information about a downloaded media item. Applicable for all media types, only one of ''audio'', ''image'' or ''video'' will be in a single DownloadHistory object'
      properties:
        audio:
          $ref: '#/components/schemas/DownloadHistoryMediaDetails'
        download_time:
          description: 'Date the media was downloaded the first time, in the format YYYY-MM-DDThh:mm:ssZ'
          format: date-time
          type: string
        id:
          description: ID of the download
          type: string
        image:
          $ref: '#/components/schemas/DownloadHistoryMediaDetails'
        is_downloadable:
          description: Specifies if the media is downloadable via its respective downloads endpoint
          type: boolean
        license:
          description: The name of the license of this download
          type: string
        metadata:
          description: The metadata that was passed in the original licensing request
          type: object
        subscription_id:
          description: ID of the subscription used to perform this download
          type: string
        user:
          $ref: '#/components/schemas/DownloadHistoryUserDetails'
        video:
          $ref: '#/components/schemas/DownloadHistoryMediaDetails'
      required:
        - id
        - download_time
        - license
      type: object
    DownloadHistoryDataList:
      description: List of download events
      properties:
        data:
          description: Download events
          items:
            $ref: '#/components/schemas/DownloadHistory'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: The current page of results
          type: integer
        per_page:
          description: The number of results per page
          type: integer
        total_count:
          description: The total number of results across all pages
          type: integer
    DownloadHistoryFormatDetails:
      description: Information about the format of the download
      properties:
        format:
          description: The format of the downloaded media
          type: string
        size:
          description: The size of the downloaded media
          type: string
      type: object
    DownloadHistoryMediaDetails:
      description: Information about the downloaded media
      properties:
        format:
          $ref: '#/components/schemas/DownloadHistoryFormatDetails'
        id:
          description: ID of the download history media details
          type: string
      required:
        - id
      type: object
    DownloadHistoryUserDetails:
      description: Information about a user
      properties:
        username:
          description: The name of the user who downloaded the item
          type: string
      required:
        - username
      type: object
    EditorialAssets:
      description: 'Asset information, including size and thumbnail URLs'
      properties:
        medium_jpg:
          $ref: '#/components/schemas/ImageSizeDetails'
        original:
          $ref: '#/components/schemas/ImageSizeDetails'
        small_jpg:
          $ref: '#/components/schemas/ImageSizeDetails'
        thumb_170:
          $ref: '#/components/schemas/Thumbnail'
        thumb_220:
          $ref: '#/components/schemas/Thumbnail'
        watermark_1500:
          $ref: '#/components/schemas/Thumbnail'
        watermark_450:
          $ref: '#/components/schemas/Thumbnail'
      type: object
    EditorialCategory:
      description: Editorial category names
      properties:
        name:
          type: string
      type: object
    EditorialContent:
      description: Metadata about editorial content
      properties:
        aspect:
          type: number
        assets:
          $ref: '#/components/schemas/EditorialAssets'
        byline:
          type: string
        caption:
          type: string
        categories:
          description: List of categories
          items:
            $ref: '#/components/schemas/EditorialCategory'
          type: array
        date_taken:
          format: date
          type: string
        description:
          type: string
        id:
          type: string
        keywords:
          items:
            type: string
          type: array
        title:
          type: string
      required:
        - id
      type: object
    EditorialContentDataList:
      description: List of editorial items
      properties:
        data:
          description: Editorial items
          items:
            $ref: '#/components/schemas/EditorialContent'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: Optional error message
          type: string
        page:
          description: Current page of the response
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results
          type: integer
    EditorialCoverItem:
      description: Cover image for editorial livefeed
      properties:
        height:
          type: integer
        id:
          type: string
        url:
          type: string
        width:
          type: integer
      required:
        - id
        - url
      type: object
    EditorialLivefeed:
      description: Metadata about editorial livefeed
      properties:
        cover_item:
          $ref: '#/components/schemas/EditorialCoverItem'
        created_time:
          description: When the livefeed was initially created
          format: date-time
          type: string
        id:
          description: Livefeed ID
          type: string
        name:
          description: Name of the livefeed
          type: string
        total_item_count:
          description: Total count of items in the livefeed
          type: integer
      required:
        - id
        - name
        - total_item_count
      type: object
    EditorialLivefeedList:
      description: List of editorial livefeeds
      properties:
        data:
          description: Editorial livefeeds
          items:
            $ref: '#/components/schemas/EditorialLivefeed'
          type: array
        message:
          description: Optional error message
          type: string
        page:
          description: Current page of the response
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results
          type: integer
      required:
        - data
        - total_count
      type: object
    EditorialSearchResults:
      description: Editorial search results
      properties:
        data:
          description: Editorial items
          items:
            $ref: '#/components/schemas/EditorialContent'
          type: array
        message:
          description: Optional error message
          type: string
        next:
          description: Cursor value that represents the next page of results
          type: string
        page:
          description: Current page of the response
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        prev:
          description: Cursor value that represents the previous page of results
          type: string
        search_id:
          description: Unique identifier for the search request
          type: string
        total_count:
          description: Total count of all results
          type: integer
      required:
        - data
        - total_count
      type: object
    Error:
      description: Error object
      properties:
        code:
          description: The error code of this error
          type: string
        data:
          description: Debugging information about the error
          type: string
        items:
          description: A list of items that produced the error
          items:
            type: object
          type: array
        message:
          description: Specific details about this error
          type: string
        path:
          description: Internal code reference to the source of the error
          type: string
      required:
        - message
      type: object
    FeaturedCollection:
      description: Featured collection metadata
      properties:
        cover_item:
          $ref: '#/components/schemas/FeaturedCollectionCoverItem'
        created_time:
          description: 'Date that the collection was created, format in YYYY-MM-DDThh:mm:ssT'
          format: date-time
          type: string
        hero_item:
          $ref: '#/components/schemas/FeaturedCollectionCoverItem'
          description: 'Top-level item that is meant as a cover image, as the first image seen to represent the collection'
        id:
          description: Collection ID
          type: string
        items_updated_time:
          description: 'Date that an item in the collection was last added or removed, in the format YYYY-MM-DDThh:mm:ssZ'
          format: date-time
          type: string
        name:
          description: Name of the collection
          type: string
        share_url:
          description: Unique share url for the collection
          type: string
        total_item_count:
          description: Total number of items in the collection
          type: integer
        updated_time:
          description: 'Date that the collection was last modified, in the format YYYY-MM-DDThh:mm:ssZ'
          format: date-time
          type: string
      required:
        - id
        - name
        - total_item_count
      type: object
    FeaturedCollectionCoverItem:
      description: Featured collection cover item metadata
      properties:
        url:
          description: URL of the collection cover item
          type: string
      required:
        - url
      type: object
    FeaturedCollectionDataList:
      description: List of featured collections
      properties:
        data:
          description: Featured collections
          items:
            $ref: '#/components/schemas/FeaturedCollection'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    GenreList:
      additionalProperties: false
      description: List of genres
      example:
        data:
          - Rock
      properties:
        data:
          description: List of genres
          items:
            type: string
          type: array
      required:
        - data
      type: object
    Image:
      description: Information about an image
      properties:
        added_date:
          description: 'Date that the image was added by the contributor, in the format YYYY-MM-DD'
          format: date
          type: string
        affiliate_url:
          description: Affiliate referral link; appears only for registered affiliate partners
          format: uri
          type: string
        aspect:
          description: Aspect ratio of the image
          type: number
        assets:
          $ref: '#/components/schemas/ImageAssets'
          description: Image asset information
        categories:
          description: Categories that this image is a part of
          items:
            $ref: '#/components/schemas/Category'
          type: array
        contributor:
          $ref: '#/components/schemas/Contributor'
        description:
          description: Detailed description of the image
          type: string
        has_model_release:
          description: Indicates whether there are model releases for the image
          type: boolean
        has_property_release:
          description: Indicates whether there are property releases for the image
          type: boolean
        id:
          description: Image ID
          type: string
        image_type:
          description: Type of image
          type: string
        is_adult:
          description: Whether or not this image contains adult content
          type: boolean
        is_editorial:
          description: Whether or not this image is editorial content
          type: boolean
        is_illustration:
          description: Whether or not this image is an illustration
          type: boolean
        keywords:
          description: Keywords associated with the content of this image
          items:
            type: string
          type: array
        media_type:
          description: 'Media type of this image, should always be "image"'
          type: string
        model_releases:
          description: List of model releases
          items:
            $ref: '#/components/schemas/ModelRelease'
          type: array
        models:
          description: List of models
          items:
            $ref: '#/components/schemas/Model'
          type: array
        releases:
          description: List of all releases of this image
          items:
            type: string
          type: array
        url:
          description: Link to image information page; included only for certain accounts
          type: string
      required:
        - id
        - media_type
        - contributor
      type: object
    ImageAssets:
      description: Image asset information
      properties:
        huge_jpg:
          $ref: '#/components/schemas/ImageSizeDetails'
        huge_tiff:
          $ref: '#/components/schemas/ImageSizeDetails'
        large_thumb:
          $ref: '#/components/schemas/Thumbnail'
        medium_jpg:
          $ref: '#/components/schemas/ImageSizeDetails'
        preview:
          $ref: '#/components/schemas/Thumbnail'
        preview_1000:
          $ref: '#/components/schemas/Thumbnail'
        preview_1500:
          $ref: '#/components/schemas/Thumbnail'
        small_jpg:
          $ref: '#/components/schemas/ImageSizeDetails'
        small_thumb:
          $ref: '#/components/schemas/Thumbnail'
        supersize_jpg:
          $ref: '#/components/schemas/ImageSizeDetails'
        supersize_tiff:
          $ref: '#/components/schemas/ImageSizeDetails'
        vector_eps:
          $ref: '#/components/schemas/ImageSizeDetails'
      type: object
    ImageCreateRequest:
      description: Image data for upload
      properties:
        base64_image:
          description: A Base64 encoded jpeg or png
          type: string
      required:
        - base64_image
      type: object
    ImageCreateResponse:
      description: Image upload information
      properties:
        id:
          type: string
      required:
        - id
      type: object
    ImageDataList:
      description: List of images
      properties:
        data:
          description: Images
          items:
            $ref: '#/components/schemas/Image'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    ImageSearchResults:
      description: Image search results
      properties:
        data:
          description: List of images
          items:
            $ref: '#/components/schemas/Image'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        search_id:
          description: Unique identifier for the search request
          type: string
        spellcheck_info:
          description: Returns information if search phrase has potentially been mistyped or another query would lead to better search results
          type: object
        total_count:
          description: Total count of all results across all pages
          type: integer
      required:
        - data
        - total_count
        - search_id
      type: object
    ImageSizeDetails:
      description: Image size information
      properties:
        display_name:
          description: Display name of this image size
          type: string
        dpi:
          type: integer
        file_size:
          description: File size (in bytes) of this image size
          type: integer
        format:
          description: Format of this image size
          type: string
        height:
          description: Height of this image size
          type: integer
        is_licensable:
          description: Whether or not this image can be licensed in this image size
          type: boolean
        width:
          description: Width of this image size
          type: integer
      type: object
    InstrumentList:
      additionalProperties: false
      description: List of instruments
      example:
        data:
          - Electric Guitar
      properties:
        data:
          description: List of instruments
          items:
            type: string
          type: array
      required:
        - data
      type: object
    Language:
      description: Language code
      enum:
        - cs
        - da
        - de
        - en
        - es
        - fi
        - fr
        - hu
        - it
        - ja
        - ko
        - nb
        - nl
        - pl
        - pt
        - ru
        - sv
        - th
        - tr
        - zh
        - zh-Hant
      title: language
      type: string
    LicenseAudio:
      description: An audio licensing item
      properties:
        audio_id:
          description: ID of the track being licensed
          type: string
        license:
          description: Type of license
          enum:
            - audio_standard
            - audio_enhanced
            - audio_platform
            - premier_music_basic
            - premier_music_extended
            - premier_music_pro
            - premier_music_comp
          type: string
        search_id:
          description: ID of the search that led to this licensing event
          type: string
      required:
        - audio_id
      type: object
    LicenseAudioRequest:
      description: License audio tracks
      example:
        audio:
          - audio_id: '1'
      properties:
        audio:
          description: List of audio tracks to license
          items:
            $ref: '#/components/schemas/LicenseAudio'
          type: array
      required:
        - audio
      type: object
    LicenseAudioResult:
      description: The response to a licensing request for an audio track
      properties:
        audio_id:
          description: ID of the track that was licensed
          type: string
        download:
          $ref: '#/components/schemas/Url'
        error:
          description: Error information if applicable
          type: string
      required:
        - audio_id
      type: object
    LicenseAudioResultDataList:
      description: List of audio license results
      example:
        data:
          - audio_id: '1'
            download:
              url: 'http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav'
      properties:
        data:
          description: License results
          items:
            $ref: '#/components/schemas/LicenseAudioResult'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    LicenseEditorialContent:
      description: Individual editorial content to license
      properties:
        editorial_id:
          description: Editorial ID
          type: string
        license:
          description: License agreement to use for licensing
          type: string
        metadata:
          $ref: '#/components/schemas/LicenseRequestMetadata'
        size:
          default: original
          description: 'Asset size to download, default is original'
          enum:
            - small
            - medium
            - original
          type: string
      required:
        - editorial_id
        - license
      type: object
    LicenseEditorialContentRequest:
      description: License editorial content request
      properties:
        country:
          description: 3-letter ISO 3166-1 alpha-3 country code for where the editorial content will be distributed; this mandatory value is used for rights checks
          example: USA
          type: string
        editorial:
          description: Editorial content to license
          items:
            $ref: '#/components/schemas/LicenseEditorialContent'
          type: array
      required:
        - country
        - editorial
      type: object
    LicenseEditorialContentResult:
      description: The response to a licensing request for editorial content
      properties:
        allotment_charge:
          description: 'For pre-paid plans, how many allotments were used for the item license'
          type: integer
        download:
          $ref: '#/components/schemas/Url'
          description: Information that is needed to download the image
        editorial_id:
          description: Editorial ID
          type: string
        error:
          type: string
      required:
        - editorial_id
      type: object
    LicenseEditorialContentResultDataList:
      description: List of editorial license results
      properties:
        data:
          description: License results
          items:
            $ref: '#/components/schemas/LicenseEditorialContentResult'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: Optional error message
          type: string
        page:
          description: Current page of the response
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results
          type: integer
    LicenseFormat:
      description: A description of a license
      properties:
        description:
          description: Description of the license
          type: string
        format:
          description: 'Format or extension of the media, such as mpeg for videos or jpeg for images'
          type: string
        media_type:
          description: Media type of the license
          enum:
            - image
            - video
            - audio
            - editorial
          type: string
        min_resolution:
          description: 'Width of the media, in pixels, allowed by this license'
          type: integer
        size:
          description: 'Keyword that details the size of the media, such as hd or sd for video, huge or vector for images'
          type: string
      type: object
    LicenseImage:
      description: Data required to license an image
      properties:
        auth_cookie:
          $ref: '#/components/schemas/Cookie'
          description: Cookie object
        editorial_acknowledgement:
          description: Set to true to acknowledge the editorial agreement
          type: boolean
        format:
          description: Image format to download
          enum:
            - jpg
            - eps
          type: string
        image_id:
          description: Image ID
          type: string
        metadata:
          $ref: '#/components/schemas/LicenseRequestMetadata'
        price:
          description: 'For revenue-sharing transactions, the final cost to the end customer'
          type: number
        search_id:
          description: ID of the search that led to this licensing transaction
          type: string
        show_modal:
          description: (Deprecated)
          type: boolean
        size:
          description: Image size to download
          enum:
            - small
            - medium
            - huge
            - vector
          type: string
        subscription_id:
          description: ID of the subscription to use for the download.
          type: string
        verification_code:
          description: (Deprecated)
          type: string
      required:
        - image_id
      type: object
    LicenseImageRequest:
      description: Image license request data
      properties:
        images:
          description: Images to create licenses for
          items:
            $ref: '#/components/schemas/LicenseImage'
          type: array
      required:
        - images
      type: object
    LicenseImageResult:
      description: The response to a licensing request for an image
      properties:
        allotment_charge:
          description: Number of allotments that this licensing event used
          type: integer
        download:
          $ref: '#/components/schemas/Url'
          description: Information that is needed to download the image
        error:
          description: 'Error message, appears only if there was an error'
          type: string
        image_id:
          description: Image ID that was licensed
          type: string
        price:
          $ref: '#/components/schemas/Price'
          description: Wholesale price information; only for rev-share partners
      required:
        - image_id
      type: object
    LicenseImageResultDataList:
      description: List of information about licensed images
      properties:
        data:
          description: License results
          items:
            $ref: '#/components/schemas/LicenseImageResult'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    LicenseRequestMetadata:
      description: 'Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder'
      example:
        customer_id: '12345'
        geo_location: US
        number_viewed: '15'
        search_term: dog
      maxProperties: 4
      properties: {}
      type: object
    LicenseVideo:
      description: Data required to license a video
      example:
        size: hd
        subscription_id: s8241143
        video_id: '2140697'
      properties:
        auth_cookie:
          $ref: '#/components/schemas/Cookie'
        editorial_acknowledgement:
          description: Whether or not this item is editorial content
          type: boolean
        metadata:
          $ref: '#/components/schemas/LicenseRequestMetadata'
        price:
          description: Retail price amount; only for rev-share partners
          type: number
        search_id:
          description: ID of the search that led to this licensing event
          type: string
        show_modal:
          description: (Deprecated)
          type: boolean
        size:
          description: Size of the video being licensed
          enum:
            - web
            - sd
            - hd
            - 4k
          type: string
        subscription_id:
          description: ID of the subscription used for this license
          type: string
        video_id:
          description: ID of the video being licensed
          type: string
      required:
        - video_id
      type: object
    LicenseVideoRequest:
      description: List of videos to license
      properties:
        videos:
          description: Videos to license
          items:
            $ref: '#/components/schemas/LicenseVideo'
          type: array
      required:
        - videos
      type: object
    LicenseVideoResult:
      description: The response to a licensing request for a video
      properties:
        allotment_charge:
          description: Number of allotments that this licensing event used
          type: integer
        download:
          $ref: '#/components/schemas/Url'
        error:
          description: Potential error that occurred during licensing
          type: string
        price:
          $ref: '#/components/schemas/Price'
          description: Wholesale price information; only for rev-share partners only
        video_id:
          description: ID of the video that was licensed
          type: string
      required:
        - video_id
      type: object
    LicenseVideoResultDataList:
      description: List of license results
      properties:
        data:
          description: License results
          items:
            $ref: '#/components/schemas/LicenseVideoResult'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    Model:
      description: Model
      properties:
        id:
          description: ID of the model
          type: string
      required:
        - id
      type: object
    ModelRelease:
      description: Model and property release metadata
      properties:
        id:
          description: ID of the model or property release
          type: string
      type: object
    MoodList:
      additionalProperties: false
      description: List of moods
      example:
        data:
          - Aggressive
      properties:
        data:
          description: List of moods
          items:
            type: string
          type: array
      required:
        - data
      type: object
    OauthAccessTokenResponse:
      description: Access token response to client apps
      properties:
        access_token:
          description: Access token that can be used for future requests
          type: string
        expires_in:
          description: 'Number of seconds before token expires, only present for expiring tokens'
          type: integer
        refresh_token:
          description: 'A refresh token that can be used to renew the access_token when it expires, only present for expiring tokens'
          type: string
        token_type:
          default: Bearer
          description: Type of token
          type: string
        user_token:
          description: 'Metadata about the access_token, only present for expiring tokens'
          type: string
      required:
        - access_token
        - token_type
      type: object
    Price:
      description: Price
      properties:
        local_amount:
          description: Dollar amount of the calculated rev-share price in the currency local_currency
          type: number
        local_currency:
          description: Currency of the rev-share price that was calculated
          type: string
      type: object
    Recommendation:
      description: Media Recommendation
      properties:
        id:
          description: Media ID
          type: string
      required:
        - id
      type: object
    RecommendationDataList:
      description: List of recommended images
      properties:
        data:
          description: Recommended images
          items:
            $ref: '#/components/schemas/Recommendation'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    RedownloadImage:
      description: Data required to redownload an image
      properties:
        auth_cookie:
          $ref: '#/components/schemas/Cookie'
        show_modal:
          description: (Deprecated)
          type: boolean
        size:
          description: Size of the image
          enum:
            - small
            - medium
            - huge
            - supersize
          type: string
        verification_code:
          description: (Deprecated)
          type: string
      type: object
    RedownloadVideo:
      description: Data required to redownload a video
      properties:
        auth_cookie:
          $ref: '#/components/schemas/Cookie'
        show_modal:
          description: (Deprecated)
          type: boolean
        verification_code:
          description: The verification code to use to redownload the video
          type: string
      type: object
    Subscription:
      description: Subscription
      properties:
        allotment:
          $ref: '#/components/schemas/Allotment'
        description:
          description: Description of the subscription
          type: string
        expiration_time:
          description: 'Date the subscription ends, in the format YYYY-MM-ddTHH:mm:ssZ'
          format: date-time
          type: string
        formats:
          description: List of formats that are licensable for the subscription
          items:
            $ref: '#/components/schemas/LicenseFormat'
          type: array
        id:
          description: Unique internal identifier for the subscription
          type: string
        license:
          description: Internal identifier for the type of subscription
          type: string
        metadata:
          $ref: '#/components/schemas/SubscriptionMetadata'
        price_per_download:
          $ref: '#/components/schemas/Price'
      required:
        - id
      type: object
    SubscriptionDataList:
      description: List of subscriptions
      properties:
        data:
          description: Subscriptions retrieved from this user
          items:
            $ref: '#/components/schemas/Subscription'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: Optional error message
          type: string
        page:
          description: Current page that is being queried
          type: integer
        per_page:
          description: Amount of subscriptions to show per page
          type: integer
        total_count:
          description: Total number of subscriptions for this user
          type: integer
    SubscriptionMetadata:
      description: Subscription Metadata
      type: object
    TestEcho:
      description: Text to echo in the response
      properties:
        text:
          type: string
      type: object
    TestValidate:
      description: Validation results
      properties:
        header:
          $ref: '#/components/schemas/TestValidateHeader'
          description: Headers as included in the request
        query:
          $ref: '#/components/schemas/TestValidateQuery'
          description: Query as included in the request
      type: object
    TestValidateHeader:
      description: Validation results
      properties:
        user-agent:
          description: User agent to expect in the response
          type: string
      type: object
    TestValidateQuery:
      description: Validation results
      properties:
        id:
          description: Integer ID that was passed in the request
          type: integer
        tag:
          description: List of tags that were passed in the request
          items:
            type: string
          type: array
      required:
        - id
      type: object
    Thumbnail:
      description: Image thumbnail information
      properties:
        height:
          description: Height in pixels of the image thumbnail
          type: integer
        url:
          description: Direct URL to the image
          type: string
        width:
          description: Width in pixels of the image thumbnail
          type: integer
      required:
        - url
        - height
        - width
      type: object
    UpdatedMedia:
      description: Information about a piece of updated media
      properties:
        id:
          description: ID of the media
          type: string
        updated_time:
          description: Date that the media was updated
          format: date-time
          type: string
        updates:
          description: Types of updates that were made to the piece of media
          items:
            type: string
          type: array
      required:
        - id
        - updated_time
        - updates
      type: object
    UpdatedMediaDataList:
      description: List of updated media
      properties:
        data:
          description: Updated media items
          items:
            $ref: '#/components/schemas/UpdatedMedia'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    Url:
      description: URL Object
      properties:
        url:
          description: 'URL that can be used to download the unwatermarked, licensed asset'
          type: string
      required:
        - url
      type: object
    Urls:
      description: URLs object
      properties:
        urls:
          description: List of URLs
          items:
            type: string
          type: array
      required:
        - urls
      type: object
    UserDetails:
      description: User details
      properties:
        contributor_id:
          description: 'Unique internal identifier of the user, as a contributor'
          type: string
        customer_id:
          description: 'Unique internal identifier of the user, as a purchaser'
          type: string
        email:
          description: Email address of the user
          type: string
        first_name:
          description: First name of the user
          type: string
        full_name:
          description: 'Full name including first, middle, and last name of the user'
          type: string
        id:
          description: 'Unique internal identifier for the user, not tied to contributor or purchasing customer'
          type: string
        is_premier:
          description: 'True if the user has access to the Premier collection, false otherwise'
          type: boolean
        is_premier_parent:
          description: True if the user has access to the Premier collection and also has child users
          type: boolean
        language:
          description: Main language of the user account
          type: string
        last_name:
          description: Last name of the user
          type: string
        only_enhanced_license:
          description: 'True if the user has an enterprise license, false otherwise'
          type: boolean
        only_sensitive_use:
          description: 'True if the user has access to sensitive use only, false otherwise'
          type: boolean
        organization_id:
          description: 'Unique internal identifier for the user''s organization, specific to Premier users'
          type: string
        premier_permissions:
          description: List of permissions allowed through the Premier client
          items:
            type: string
          type: array
        username:
          description: User name associated to the user
          type: string
      type: object
    Video:
      description: Information about a video
      properties:
        added_date:
          description: 'Date this video was added to the Shutterstock library, in the format YYYY-MM-DD'
          format: date
          type: string
        affiliate_url:
          description: Affiliate referral link; appears only for registered affiliate partners
          format: uri
          type: string
        aspect:
          description: Aspect ratio of this video in decimal format
          type: number
        aspect_ratio:
          description: Aspect ratio of the video
          type: string
        assets:
          $ref: '#/components/schemas/VideoAssets'
        categories:
          description: List of categories
          items:
            $ref: '#/components/schemas/Category'
          type: array
        contributor:
          $ref: '#/components/schemas/Contributor'
        description:
          description: Description of this video
          type: string
        duration:
          description: 'Duration of this video, in seconds'
          type: number
        has_model_release:
          description: Whether or not this video has been released for use by the model appearing in it
          type: boolean
        has_property_release:
          description: Whether or not this video has received a release to show the landmark or property appearing in it
          type: boolean
        id:
          description: ID of the video
          type: string
        is_adult:
          description: Whether or not this video contains adult content
          type: boolean
        is_editorial:
          description: Whether or not this video is editorial content
          type: boolean
        keywords:
          description: Keywords associated with the content of this video
          items:
            type: string
          type: array
        media_type:
          description: 'Media type of this video, should always be "video"'
          type: string
        models:
          description: List of models in this video
          items:
            $ref: '#/components/schemas/Model'
          type: array
        url:
          description: Link to video information page; included only for certain accounts
          type: string
      required:
        - id
        - media_type
        - contributor
      type: object
    VideoAssets:
      description: Video asset information
      properties:
        4k:
          $ref: '#/components/schemas/VideoSizeDetails'
        hd:
          $ref: '#/components/schemas/VideoSizeDetails'
        preview_jpg:
          $ref: '#/components/schemas/Url'
        preview_mp4:
          $ref: '#/components/schemas/Url'
        preview_webm:
          $ref: '#/components/schemas/Url'
        sd:
          $ref: '#/components/schemas/VideoSizeDetails'
        thumb_jpg:
          $ref: '#/components/schemas/Url'
        thumb_jpgs:
          $ref: '#/components/schemas/Urls'
        thumb_mp4:
          $ref: '#/components/schemas/Url'
        thumb_webm:
          $ref: '#/components/schemas/Url'
        web:
          $ref: '#/components/schemas/VideoSizeDetails'
      type: object
    VideoDataList:
      description: List of videos
      properties:
        data:
          description: Videos
          items:
            $ref: '#/components/schemas/Video'
          type: array
        errors:
          description: Error list; appears only if there was an error
          items:
            $ref: '#/components/schemas/Error'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
    VideoSearchResults:
      description: Video search results
      properties:
        data:
          description: List of videos
          items:
            $ref: '#/components/schemas/Video'
          type: array
        message:
          description: 'Server-generated message, if any'
          type: string
        page:
          description: Current page that is returned
          type: integer
        per_page:
          description: Number of results per page
          type: integer
        total_count:
          description: Total count of all results across all pages
          type: integer
      required:
        - data
        - total_count
        - search_id
      type: object
    VideoSizeDetails:
      description: Video asset information
      properties:
        display_name:
          description: Display name of this video size
          type: string
        file_size:
          description: File size (in bytes) of this video size
          type: integer
        format:
          description: Format of this video size
          type: string
        fps:
          description: Frames per second of this video size
          type: number
        height:
          description: Height of this video size
          type: integer
        is_licensable:
          description: Whether or not videos can be licensed in this video size
          type: boolean
        width:
          description: Width of this video size
          type: integer
      type: object
  securitySchemes:
    basic:
      scheme: basic
      type: http
    contributor_accessCode:
      flows:
        authorizationCode:
          authorizationUrl: 'https://contributor-accounts.shutterstock.com/oauth/authorize'
          scopes:
            collections.edit: 'Grant the ability to create new collections, edit a collection, and modify the contents of a collection'
            collections.view: Grant read-only access to a collection and its contents.
            earnings.view: Grant the ability to view a user's current earnings and payouts.
            licenses.create: Grant the ability to download and license media on behalf of the user.
            media.edit: Grant the ability to make changes to a user's existing approved media.
            media.submit: Grant the ability to submit a user's uploaded media for review and check their approval states.
            media.upload: Grant the ability to upload media to a user's account.
            user.address: Grants read-only access to a user's physical address.
            user.edit: Grants read and write access to all user account information.
            user.email: Grants read-only access to a user's email address.
            user.view: 'Grants read-only access to a user''s basic account information (includes username, id, first and last name). If email is the same as username, it also implies user.email'
          tokenUrl: 'https://contributor-accounts.shutterstock.com/oauth/access_token'
      type: oauth2
      x-shutterstock-realm: contributor
    customer_accessCode:
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.shutterstock.com/oauth/authorize'
          scopes:
            collections.edit: 'Grant the ability to create new collections, edit a collection, and modify the contents of a collection'
            collections.view: Grant read-only access to a collection and its contents.
            licenses.create: Grant the ability to download and license media on behalf of the user.
            licenses.view: Grant read-only access to a user's licenses.
            purchases.view: Grant read-only access to a user's purchase history.
            user.view: 'Grants read-only access to a user''s basic account information (includes username, id, first and last name). If email is the same as username, it also implies user.email'
          tokenUrl: 'https://api.shutterstock.com/v2/oauth/access_token'
      type: oauth2
      x-shutterstock-realm: customer
